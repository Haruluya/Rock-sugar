{"version":3,"file":"js/306.8a6acf80.js","mappings":"k/HA6EaA,MAAM,gB,GACFA,MAAM,O,UACPC,EAAAA,EAAAA,GAGM,OAHDD,MAAM,SAAO,EACdC,EAAAA,EAAAA,GAAgC,QAA1BC,GAAG,YAAW,UACpBD,EAAAA,EAAAA,GAAqC,QAA/BC,GAAG,QAAO,oBAFpB,K,GAIKF,MAAM,Y,UAIfC,EAAAA,EAAAA,GAGM,OAHDD,MAAM,cAAY,EACnBC,EAAAA,EAAAA,GAA2D,QAArDD,MAAM,SAAO,EAACC,EAAAA,EAAAA,GAAgC,QAA1BC,GAAG,YAAW,YACxCD,EAAAA,EAAAA,GAA6D,QAAvDD,MAAM,WAAU,sCAF1B,K,GAIKA,MAAM,Q,wGA1FnBG,EAAAA,EAAAA,IA8FO,aA7FHC,GA2EAH,EAAAA,EAAAA,GAiBM,MAjBN,EAiBM,EAhBFA,EAAAA,EAAAA,GAQM,MARN,EAQM,CAPFI,GAIAJ,EAAAA,EAAAA,GAEM,MAFN,EAEM,EADFK,EAAAA,EAAAA,IAAsDC,EAAA,CAAxCC,cAAaC,EAAAA,aAAW,8BAG9CC,GAIAT,EAAAA,EAAAA,GAEM,MAFN,EAEM,EADFK,EAAAA,EAAAA,IAAmCK,Q,aAYnD,GACIC,KAAK,iBACLC,UACIC,KAAKC,QACR,EACDC,QAAS,CACLD,SAEyBE,WAAWC,SAAS,GAA7C,IACIC,EAAqBF,WAAWC,SAAS,IAGzCE,EAASC,SAASC,cAAc,WAChCC,EAAKH,EAAOI,WAAW,SAC3B,IAAKD,EACD,OAGJA,EAAGE,OAAOF,EAAGG,YAGb,IAAIC,EAAS,CACTC,SAAU,CAAEC,cAAe,EAAGC,KAAM,CAAC,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IACpEC,SAAU,CAAEF,cAAe,EAAGC,KAAM,CAAC,GAAK,EAAG,EAAG,EAAG,EAAG,IACtDE,OAAU,CAAEH,cAAe,EAAGC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAI7DG,EAAahB,WAAWiB,2BAA2BX,EAAII,GAGvDQ,EAAclB,WAAWmB,kBAAkBb,EAAI,CAAC,gBAAiB,oBAGjEc,EAAsC,CACtCC,gBAAyB,EAAE,GAAI,GAAI,KACnCC,cAAyBtB,WAAWuB,WACpCC,aAAyB,CAAC,EAAG,EAAG,EAAG,IAInCC,EAAuC,CACvCC,sBAAyB1B,WAAWuB,WACpCI,QAAyB3B,WAAWuB,WACpCK,wBAAyB5B,WAAWuB,YAGpCM,EAAO,SAASC,EAAKC,GAKrB,YAJYC,IAARD,IACJA,EAAMD,EACNA,EAAM,GAECA,EAAMG,KAAKC,UAAYH,EAAMD,EACvC,EAEGK,EAAU,SAASC,GACnB,OAAOH,KAAKI,MAAMJ,KAAKC,SAAWE,EACrC,EAGD,IAAIE,EAAS,UACTC,EAAS,UACTC,EAAS,IAGb,SAASC,EAAaC,GAClBJ,EAASI,EAAMC,OAAOC,MACtBC,IACAC,GACJ,CACA,SAASC,EAAaL,GAClBJ,EAASI,EAAMC,OAAOC,MACtBC,IACAC,GACJ,CACA,SAASE,EAAaN,EAAMO,GACxBT,EAASS,EAAGL,MACZC,IACAC,GACJ,CACA9C,WAAWkD,YAAY,SAAU,CAACN,MAAOJ,EAAQW,MAAOH,EAAclB,IAAK,EAAGC,IAAK,IAAKqB,KAAM,GAAIC,UAAW,IAC7GrD,WAAWsD,gBAAgB,SAASb,GACpCzC,WAAWsD,gBAAgB,SAASP,GAIpC,IAAIQ,EAAU,GAEd,SAASV,IAELU,EAAU,GAQV,IAPA,IAAIC,EAAW,CACXxD,WAAWyD,kBAAkBnD,EAAI,CAAEgC,SAAQC,WAC3CvC,WAAW0D,mBAAmBpD,EAAG,CAAEgC,SAAQC,WAC3CvC,WAAW2D,kBAAkBrD,EAAI,CAAEgC,SAAQC,YAE3CqB,EAAapB,EACbqB,EAAYhC,EAAK,KACZiC,EAAK,EAAGA,EAAKF,IAAcE,EAChCP,EAAQQ,KAAK,CACTC,OAAQnC,EAAK,KACboC,UAAWpC,EAAe,EAAVI,KAAKiC,IACrBC,UAAWtC,EAAKI,KAAKiC,IACrBE,iBAAkB,CACdC,YAAyBC,OAAOC,IAAI1C,EAAKgC,EAAWA,EAAY,KAAM,GAAK,GAAGvD,KAC9EkE,UAAyBhB,EAASrB,EAAQqB,EAASiB,SACnDC,WAAyB,CAAC,EAAG,EAAG,EAAG,GACnCC,YAAyB9C,EAAK,KAC9B+C,iBAAyB/C,EAAK,KAI9C,CAMA,SAASiB,EAAU+B,GACfA,EAAc,KAAPA,EAAgB,EACvB7E,WAAW8E,0BAA0BxE,EAAGH,QACxCG,EAAGyE,SAAS,EAAG,EAAGzE,EAAGH,OAAO6E,MAAO1E,EAAGH,OAAO8E,QAC7C3E,EAAG4E,MAAM5E,EAAG6E,iBAAmB7E,EAAG8E,kBAElC,IAAIC,EAAS/E,EAAGH,OAAOmF,YAAchF,EAAGH,OAAOoF,aAC3CC,EACAxF,WAAWyF,YAAYvF,EAAoBmF,EAAQ,EAAG,KAEtDK,EAAiB,CAAC,EAAG,EAAG,KACxB/C,EAAS,CAAC,EAAG,EAAG,GAChBgD,EAAK,CAAC,EAAG,EAAG,GACZC,EAAe5F,WAAW6F,OAAOH,EAAgB/C,EAAQgD,EAAIvE,EAAoCE,eAEjGwE,EAAa9F,WAAW+F,QAAQH,GAChCI,EAAuBhG,WAAWiG,WAAWT,EAAkBM,GACnExF,EAAG4F,WAAWhF,EAAYiF,SAG1BnG,WAAWoG,wBAAwB9F,EAAIY,EAAaF,GAGpDhB,WAAWqG,YAAYnF,EAAaE,GAGpCmC,EAAQ+C,SAAQ,SAASC,GACrB,IAAIC,EAAcxG,WAAWiE,UAAUsC,EAAOtC,UAAYY,GAC1D2B,EAAcxG,WAAWyG,QAAQD,EAAaD,EAAOpC,UAAYU,GACjE2B,EAAcxG,WAAW0G,YAAYF,EAAa,EAAG,EAAGD,EAAOvC,QAC/DvC,EAAqCE,QAAU6E,EAE/CxG,WAAWiG,WAAWD,EAAsBQ,EAAa/E,EAAqCC,uBAC9F1B,WAAW2G,UAAU3G,WAAW+F,QAAQS,GAAc/E,EAAqCG,yBAG3F5B,WAAWqG,YAAYnF,EAAaO,GACpCzB,WAAWqG,YAAYnF,EAAaqF,EAAOnC,kBAC3C9D,EAAGsG,WAAWtG,EAAGuG,UAAW,EAAG7F,EAAW8F,YAE7C,IAEDC,sBAAsBjE,EAC1B,CA/CAD,IAEAkE,sBAAsBjE,EA8CtB,I,QCnQR,MAAMkE,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://rock-sugar/./src/pages/Webgl/WebglDemo/MultipleObject/index.vue","webpack://rock-sugar/./src/pages/Webgl/WebglDemo/MultipleObject/index.vue?3a0e"],"sourcesContent":["<template lang=\"html\">\r\n    <body>\r\n        <div class=\"webglContainer\">\r\n            <div class=\"canvesContainer\">\r\n                <canvas id=\"canvas\">\r\n                    <pre  id=\"vertex-shader\" type=\"x-shader/x-vertex\">\r\n                        uniform mat4 u_worldViewProjection;\r\n                        uniform vec3 u_lightWorldPos;\r\n                        uniform mat4 u_world;\r\n                        uniform mat4 u_viewInverse;\r\n                        uniform mat4 u_worldInverseTranspose;\r\n                        attribute vec4 a_position;\r\n                        attribute vec3 a_normal;\r\n                        attribute vec2 a_texcoord;\r\n                        varying vec4 v_position;\r\n                        varying vec2 v_texCoord;\r\n                        varying vec3 v_normal;\r\n                        varying vec3 v_surfaceToLight;\r\n                        varying vec3 v_surfaceToView;\r\n                \r\n                        void main() {\r\n                            v_texCoord = a_texcoord;\r\n                            v_position = (u_worldViewProjection * a_position);\r\n                            v_normal = (u_worldInverseTranspose * vec4(a_normal, 0)).xyz;\r\n                            v_surfaceToLight = u_lightWorldPos - (u_world * a_position).xyz;\r\n                            v_surfaceToView = (u_viewInverse[3] - (u_world * a_position)).xyz;\r\n                            gl_Position = v_position;\r\n                        }\r\n                \r\n                    </pre>\r\n                    <pre  id=\"fragment-shader\" type=\"x-shader/x-fragment\">\r\n                        precision mediump float;\r\n                \r\n                        varying vec4 v_position;\r\n                        varying vec2 v_texCoord;\r\n                        varying vec3 v_normal;\r\n                        varying vec3 v_surfaceToLight;\r\n                        varying vec3 v_surfaceToView;\r\n                        \r\n                        uniform vec4 u_lightColor;\r\n                        uniform vec4 u_colorMult;\r\n                        uniform sampler2D u_diffuse;\r\n                        uniform vec4 u_specular;\r\n                        uniform float u_shininess;\r\n                        uniform float u_specularFactor;\r\n                        \r\n                        vec4 lit(float l ,float h, float m) {\r\n                          return vec4(1.0,\r\n                                      abs(l), (l > 0.0) ? pow(max(0.0, h), m) : 0.0,\r\n                                      1.0);\r\n                        }\r\n                        \r\n                        void main() {\r\n                          vec4 diffuseColor = texture2D(u_diffuse, v_texCoord);\r\n                          vec3 a_normal = normalize(v_normal);\r\n                          vec3 surfaceToLight = normalize(v_surfaceToLight);\r\n                          vec3 surfaceToView = normalize(v_surfaceToView);\r\n                          vec3 halfVector = normalize(surfaceToLight + surfaceToView);\r\n                          vec4 litR = lit(dot(a_normal, surfaceToLight),\r\n                                            dot(a_normal, halfVector), u_shininess);\r\n                          vec4 outColor = vec4((\r\n                          u_lightColor * (diffuseColor * litR.y * u_colorMult +\r\n                                        u_specular * litR.z * u_specularFactor)).rgb,\r\n                              diffuseColor.a);\r\n                          gl_FragColor = outColor;\r\n                        }\r\n                    </pre>\r\n                </canvas>\r\n            </div>\r\n            <div id=\"uiContainer\">\r\n                <div id=\"ui\">\r\n                  <div id=\"color1\"></div>\r\n                  <div id=\"color2\"></div>\r\n                  <div id=\"amount\"></div>\r\n                </div>\r\n              </div>\r\n        </div>\r\n        <div class=\"desContainer\">\r\n            <div class=\"des\">\r\n                <div class=\"title\">\r\n                    <span id=\"category\">webgl</span>\r\n                    <span id=\"name\">MultipleObject</span>\r\n                </div>\r\n                <div class=\"codeLink\">\r\n                    <nano_button @handleClick=\"handleClick\"></nano_button>\r\n                </div>\r\n            </div>\r\n            <div class=\"conclusion\">\r\n                <span class=\"title\"><span id=\"conTitle\">多物体渲染</span></span>\r\n                <span class=\"content\">I want to render a lot of money.</span>\r\n            </div>\r\n            <div class=\"menu\">\r\n                <nano_items_menu></nano_items_menu>\r\n            </div>\r\n        </div>\r\n    </body>\r\n\r\n\r\n\r\n</template>\r\n<script>\r\n\r\n// const chroma = require('_utils/chroma.min');\r\n\r\nexport default {\r\n    name:\"MultipleObject\",\r\n    mounted() {\r\n        this.Render();\r\n    },\r\n    methods: {\r\n        Render(){\r\n        // transform。\r\n        var cameraAngleRadians = HNWUEngine.degToRad(0);\r\n        var fieldOfViewRadians = HNWUEngine.degToRad(60);\r\n        var cameraHeight = 50;\r\n\r\n        var canvas = document.querySelector(\"#canvas\");\r\n        var gl = canvas.getContext(\"webgl\");\r\n        if (!gl) {\r\n            return;\r\n        }\r\n\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        // attributes array。\r\n        var arrays = {\r\n            position: { numComponents: 3, data: [0, -10, 0, 10, 10, 0, -10, 10, 0], },\r\n            texcoord: { numComponents: 2, data: [0.5, 0, 1, 1, 0, 1],               },\r\n            normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1],        },\r\n        };\r\n\r\n        // 创建buffer。\r\n        var bufferInfo = HNWUEngine.createBufferInfoFromArrays(gl, arrays);\r\n\r\n        // programinfo。\r\n        var programInfo = HNWUEngine.createProgramInfo(gl, [\"vertex-shader\", \"fragment-shader\"]);\r\n\r\n        // const全局变量。\r\n        var uniformsThatAreTheSameForAllObjects = {\r\n            u_lightWorldPos:         [-50, 30, 100],\r\n            u_viewInverse:           HNWUEngine.identity(),\r\n            u_lightColor:            [1, 1, 1, 1],\r\n        };\r\n\r\n        // 可变全局变量。\r\n        var uniformsThatAreComputedForEachObject = {\r\n            u_worldViewProjection:   HNWUEngine.identity(),\r\n            u_world:                 HNWUEngine.identity(),\r\n            u_worldInverseTranspose: HNWUEngine.identity(),\r\n        };\r\n\r\n        var rand = function(min, max) {\r\n            if (max === undefined) {\r\n            max = min;\r\n            min = 0;\r\n            }\r\n            return min + Math.random() * (max - min);\r\n        };\r\n\r\n        var randInt = function(range) {\r\n            return Math.floor(Math.random() * range);\r\n        };\r\n\r\n        // transform.\r\n        let color1 = \"#FFD700\";\r\n        let color2 = \"#FFFF00\";\r\n        let amount = 200;\r\n\r\n        // callback.\r\n        function updateColor1(event) {\r\n            color1 = event.target.value;\r\n            createObjects();\r\n            drawScene();\r\n        }\r\n        function updateColor2(event){\r\n            color1 = event.target.value;\r\n            createObjects();\r\n            drawScene();\r\n        }\r\n        function updateAmount(event,ui) {\r\n            amount = ui.value;\r\n            createObjects();\r\n            drawScene();\r\n        }\r\n        HNWUEngine.setupSlider(\"amount\", {value: amount, slide: updateAmount, min: 0, max: 300, step: 10, precision: 2});\r\n        HNWUEngine.setupColorInput(\"color1\",updateColor1);\r\n        HNWUEngine.setupColorInput(\"color2\",updateColor2);\r\n\r\n\r\n        // 材质。\r\n        var objects = [];\r\n\r\n        function createObjects(){\r\n            // 循环创建。\r\n            objects = [];\r\n            var textures = [\r\n                HNWUEngine.makeStripeTexture(gl, { color1, color2, }),\r\n                HNWUEngine.makeCheckerTexture(gl,{ color1, color2, }),\r\n                HNWUEngine.makeCircleTexture(gl, { color1, color2, }),\r\n            ];\r\n            var numObjects = amount;\r\n            var baseColor = rand(240);\r\n            for (var ii = 0; ii < numObjects; ++ii) {\r\n                objects.push({\r\n                    radius: rand(150),\r\n                    xRotation: rand(Math.PI * 2),\r\n                    yRotation: rand(Math.PI),\r\n                    materialUniforms: {\r\n                        u_colorMult:             chroma.hsv(rand(baseColor, baseColor + 120), 0.5, 1).gl(),\r\n                        u_diffuse:               textures[randInt(textures.length)],\r\n                        u_specular:              [1, 1, 1, 1],\r\n                        u_shininess:             rand(500),\r\n                        u_specularFactor:        rand(1),\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        createObjects()\r\n\r\n        requestAnimationFrame(drawScene);\r\n\r\n        function drawScene(time) {\r\n            time = time * 0.0001 + 5;\r\n            HNWUEngine.resizeCanvasToDisplaySize(gl.canvas);\r\n            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n            var aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n            var projectionMatrix =\r\n                HNWUEngine.perspective(fieldOfViewRadians, aspect, 1, 2000);\r\n\r\n            var cameraPosition = [0, 0, 100];\r\n            var target = [0, 0, 0];\r\n            var up = [0, 1, 0];\r\n            var cameraMatrix = HNWUEngine.lookAt(cameraPosition, target, up, uniformsThatAreTheSameForAllObjects.u_viewInverse);\r\n\r\n            var viewMatrix = HNWUEngine.inverse(cameraMatrix);\r\n            var viewProjectionMatrix = HNWUEngine.multiply3d(projectionMatrix, viewMatrix);\r\n            gl.useProgram(programInfo.program);\r\n\r\n            // 设置buffer和属性。\r\n            HNWUEngine.setBuffersAndAttributes(gl, programInfo, bufferInfo);\r\n\r\n            // 设置全局变量。\r\n            HNWUEngine.setUniforms(programInfo, uniformsThatAreTheSameForAllObjects);\r\n\r\n            // Draw objects\r\n            objects.forEach(function(object) {\r\n                var worldMatrix = HNWUEngine.xRotation(object.xRotation * time);\r\n                worldMatrix = HNWUEngine.yRotate(worldMatrix, object.yRotation * time);\r\n                worldMatrix = HNWUEngine.translate3d(worldMatrix, 0, 0, object.radius);\r\n                uniformsThatAreComputedForEachObject.u_world = worldMatrix;\r\n\r\n                HNWUEngine.multiply3d(viewProjectionMatrix, worldMatrix, uniformsThatAreComputedForEachObject.u_worldViewProjection);\r\n                HNWUEngine.transpose(HNWUEngine.inverse(worldMatrix), uniformsThatAreComputedForEachObject.u_worldInverseTranspose);\r\n\r\n                // 设置材质。\r\n                HNWUEngine.setUniforms(programInfo, uniformsThatAreComputedForEachObject);\r\n                HNWUEngine.setUniforms(programInfo, object.materialUniforms);\r\n                gl.drawArrays(gl.TRIANGLES, 0, bufferInfo.numElements);\r\n                // gl.drawElements(gl.TRIANGLES, bufferInfo.numElements, gl.UNSIGNED_SHORT, 0);\r\n            });\r\n\r\n            requestAnimationFrame(drawScene);\r\n        }\r\n        }\r\n    },\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n@import \"../index.less\";\r\n</style>","import { render } from \"./index.vue?vue&type=template&id=725df62c&scoped=true&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=725df62c&lang=less&scoped=true\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-725df62c\"]])\n\nexport default __exports__"],"names":["class","_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_4","_createVNode","_component_nano_button","onHandleClick","_ctx","_hoisted_6","_component_nano_items_menu","name","mounted","this","Render","methods","HNWUEngine","degToRad","fieldOfViewRadians","canvas","document","querySelector","gl","getContext","enable","DEPTH_TEST","arrays","position","numComponents","data","texcoord","normal","bufferInfo","createBufferInfoFromArrays","programInfo","createProgramInfo","uniformsThatAreTheSameForAllObjects","u_lightWorldPos","u_viewInverse","identity","u_lightColor","uniformsThatAreComputedForEachObject","u_worldViewProjection","u_world","u_worldInverseTranspose","rand","min","max","undefined","Math","random","randInt","range","floor","color1","color2","amount","updateColor1","event","target","value","createObjects","drawScene","updateColor2","updateAmount","ui","setupSlider","slide","step","precision","setupColorInput","objects","textures","makeStripeTexture","makeCheckerTexture","makeCircleTexture","numObjects","baseColor","ii","push","radius","xRotation","PI","yRotation","materialUniforms","u_colorMult","chroma","hsv","u_diffuse","length","u_specular","u_shininess","u_specularFactor","time","resizeCanvasToDisplaySize","viewport","width","height","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","aspect","clientWidth","clientHeight","projectionMatrix","perspective","cameraPosition","up","cameraMatrix","lookAt","viewMatrix","inverse","viewProjectionMatrix","multiply3d","useProgram","program","setBuffersAndAttributes","setUniforms","forEach","object","worldMatrix","yRotate","translate3d","transpose","drawArrays","TRIANGLES","numElements","requestAnimationFrame","__exports__","render"],"sourceRoot":""}