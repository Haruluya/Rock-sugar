{"version":3,"file":"js/975.b62cca3b.js","mappings":"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","sources":["webpack://rock-sugar/./src/pages/CG/Experiment/Pyramid/index.vue","webpack://rock-sugar/./src/pages/CG/Experiment/Pyramid/resource/vertex-shader.js","webpack://rock-sugar/./src/pages/CG/Experiment/Pyramid/resource/fragment-shader.js","webpack://rock-sugar/./src/pages/CG/Experiment/Pyramid/index.vue?40f2"],"sourcesContent":["<template lang=\"html\">\r\n    <webgl_basic_render_panel\r\n        :prop_des_data=\"desData\"\r\n        :prop_ui_setter=\"uiSetter\"\r\n        :prop_vertex_shader=\"vertexShaderSource\"\r\n        :prop_fragment_shader=\"fragmentShaderSource\"\r\n        :prop_section_params=\"sectionParams\"\r\n        ref=\"page\"\r\n        @Init=\"Init\"\r\n        @Render=\"Render\"\r\n    />\r\n</template>\r\n<script>\r\n\r\nimport vertexShaderSource from './resource/vertex-shader.js'\r\nimport fragmentShaderSource from './resource/fragment-shader.js'\r\nimport NanoObjParse from \"../../../Webgl/HNWUEngine/ModelParse.js\"\r\nimport uiSetting from '../ui-setting'\r\n\r\nconst desData = {\r\n    category: \"Pyramid\",\r\n    name: \"ClipPolygon\",\r\n    buttonContent: \"查看源码\",\r\n    title: \"金字塔\",\r\n    content: \"Pyramid.\"\r\n}\r\n\r\n\r\n\r\n/*\r\n    @author:haruluya\r\n    @des: Ex15 Pyramid.\r\n*/\r\n\r\n\r\nexport default {\r\n    name:\"Pyramid\",\r\n    data() {\r\n        return {\r\n            gl: null,\r\n            canvas: null,\r\n            program: null,\r\n            vertexShaderSource,\r\n            fragmentShaderSource,\r\n            desData,\r\n            perspective:{\r\n                aspect:0,\r\n                fieldOfViewRadians:  HNWUEngine.degToRad(60),\r\n                zNear: 1,\r\n                zFar: 10000,\r\n            },\r\n            transform:{\r\n                translation:[0, 0, 15],\r\n                rotation:[HNWUEngine.degToRad(0), HNWUEngine.degToRad(270), HNWUEngine.degToRad(0)],\r\n                scale:[.7,.7,.7]\r\n            },\r\n            camera:{\r\n                target:[0, 0, 0],\r\n                position:[0, 0, 1],\r\n                up:[0,1,0]\r\n            },\r\n            sectionParams:{\r\n                lightDirection:{x:-1,y:3,z:5},\r\n                texture:null,\r\n            },\r\n            page:null,\r\n            uiSetter:[],\r\n            objectData:null,\r\n            objComponentsInfo:null,\r\n            objOffset:null,\r\n\r\n        }\r\n    },\r\n    computed:{\r\n        defaultMaterial(){\r\n            return{\r\n                diffuse: [1, 1, 1],\r\n                diffuseMap: NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 0]),\r\n                normalMap:  NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 0]),\r\n                ambient: [0, 0, 0],\r\n                specular: [0, 0, 0],\r\n                specularMap: NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 255]),\r\n                shininess: 400,\r\n                opacity: 1,\r\n            }\r\n        },\r\n        //uiSetter.\r\n        uiSetter() {\r\n            let sectionParams = this.sectionParams;\r\n            let setter = [\r\n                { type: \"slider-vector\", id: \"lightDirection\" , value: sectionParams.lightDirection, min: { x: 0, y: 0,z:0 }, max: { x: 100, y: 100 ,z:100}, \r\n                    callback: uiSetting.globalUiCallbacks.updatePoint(this, \"lightDirection\") },\r\n            ];\r\n\r\n            return setter;\r\n        },\r\n    },\r\n    mounted(){\r\n        this.getObjectData();\r\n    },\r\n    methods: {\r\n        Init(){\r\n            this.page = this.$refs.page;\r\n            this.gl = this.page.getGL();\r\n            if(!this.objectData){\r\n                return;\r\n            }\r\n            this.page.addProgram(\"obj\",vertexShaderSource,fragmentShaderSource);\r\n\r\n            //Get bufferinfo and setters.\r\n            this.perspective.aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\r\n\r\n            //set tranform for 3dviewer.\r\n            this.$refs.page.set3DViewer(this.perspective,this.camera,this.transform);\r\n\r\n            const data = this.objectData.obj;\r\n            \r\n            //offset.\r\n            this.objOffset = this.page.setObjectToSceenCenter(data.geometries);\r\n\r\n            //get object info.\r\n            this.objComponentsInfo = data.geometries.map(({material,data,object}) => {\r\n                const componentName = object+material;\r\n                this.page.addComponent(\"obj\",componentName);\r\n                //handel normal.\r\n                if (data.texcoord && data.normal) {\r\n                    data.tangent = NanoObjParse.generateTangents(data.position, data.texcoord);\r\n                    this.page.addBuffer(\"tangent\",data.tangent,componentName);\r\n                } else {\r\n                    this.page.addBuffer(\"tangent\",{ value: [1, 0, 0] },componentName);\r\n                }\r\n                \r\n                if (!data.texcoord) {\r\n                    data.texcoord = { value: [0, 0] };\r\n                }\r\n\r\n                if (!data.normal) {\r\n                    data.normal = { value: [0, 0, 1] };\r\n                }\r\n\r\n                //handle color.\r\n                if (data.color) {\r\n                    if (data.position.length === data.color.length) {\r\n                        data.color = { numComponents: 3, data: data.color };\r\n                        this.page.addBuffer(\"color\",data.color,componentName);\r\n                    }\r\n                }else{\r\n                    this.page.addBuffer(\"color\",{ value: [1, 1, 1, 1] },componentName);\r\n                }\r\n\r\n                this.page.addBuffer(\"position\",{data:data.position},componentName);\r\n                this.page.addBuffer(\"texcoord\",{numComponents:2,data:data.texcoord},componentName);\r\n                this.page.addBuffer(\"normal\",{data:data.normal},componentName);\r\n                \r\n                return {\r\n                    name:componentName,\r\n                    component:this.page.getComponents()[componentName],\r\n                    material:{\r\n                        ...this.defaultMaterial,\r\n                        ...this.objectData.materials[material]\r\n                    }\r\n                }\r\n            });\r\n\r\n           {\r\n            const gl = this.gl;\r\n            this.sectionParams.texture = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, this.sectionParams.texture);\r\n\r\n            // fill texture with 3x2 pixels\r\n            const level = 0;\r\n            const internalFormat = gl.LUMINANCE;\r\n            const width = 3;\r\n            const height = 2;\r\n            const border = 0;\r\n            const format = gl.LUMINANCE;\r\n            const type = gl.UNSIGNED_BYTE;\r\n            const data = new Uint8Array([\r\n                126,  153, 126,\r\n                0, 0,   0,\r\n            ]);\r\n            const alignment = 1;\r\n            gl.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);\r\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border,\r\n                            format, type, data);\r\n\r\n            // set the filtering so we don't need mips and it's not filtered\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n           }\r\n        },\r\n        Render(){\r\n            if(!this.objectData){\r\n                return;\r\n            }\r\n\r\n            const gl = this.gl;\r\n\r\n            gl.enable(gl.DEPTH_TEST);\r\n            gl.enable(gl.CULL_FACE);\r\n            gl.enable(gl.MULTISAMPLE);\r\n            //matrix.\r\n            let projectionMatrix = HNWUEngine.perspective(\r\n                this.perspective.fieldOfViewRadians, \r\n                this.perspective.aspect, \r\n                this.perspective.zNear, \r\n                this.perspective.zFar\r\n                );\r\n            let cameraMatrix = HNWUEngine.lookAt(this.camera.position, this.camera.target, this.camera.up);\r\n            let viewMatrix = HNWUEngine.inverse(cameraMatrix);\r\n\r\n            let worldMatrix = HNWUEngine.getTransformMatrix(\r\n                    HNWUEngine.yRotation(0),this.transform);\r\n            worldMatrix = HNWUEngine.translate3d(worldMatrix,...this.objOffset);\r\n\r\n            //render components.\r\n            this.objComponentsInfo.forEach(({name,component,material})=>{\r\n                this.page.useProgram(component.program);\r\n                if(name != \"defaultphong1SG\"){\r\n                    material.diffuseMap = this.sectionParams.texture;\r\n                }\r\n                const lightDirection = [this.sectionParams.lightDirection.x,this.sectionParams.lightDirection.y,this.sectionParams.lightDirection.z]\r\n                const sharedUniforms = {\r\n                    \"u_world\": worldMatrix,\r\n                    \"u_view\": viewMatrix,\r\n                    \"u_lightDirection\": HNWUEngine.normalize(lightDirection),\r\n                    \"u_projection\": projectionMatrix,\r\n                    \"u_viewWorldPosition\":this.camera.position,\r\n                }\r\n                const uniforms = Object.assign(sharedUniforms,material);\r\n                Object.entries(uniforms).forEach(([key,value])=>{\r\n                    this.page.addUniform(key,value,name);\r\n                })\r\n                this.page.setSetters(name);\r\n                this.page.drawComponent(name)\r\n            })\r\n\r\n\r\n        },\r\n        async getObjectData(){\r\n            let objLink = './models/pyramid/pyramid.obj'\r\n\r\n            const response =  await fetch(objLink);  \r\n            const text = await response.text();\r\n            const obj = NanoObjParse.objectParse(text);\r\n            const baseLink = new URL(objLink, window.location.href);\r\n            const matTexts = await Promise.all(obj.materialLibs.map(async filename => {\r\n                const matHref = new URL(filename, baseLink).href;\r\n                const response = await fetch(matHref);\r\n                return await response.text();\r\n            }));\r\n            const materials = NanoObjParse.parseMTL(matTexts.join('\\n'));\r\n            const textures = {\r\n                defaultWhite: NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 255]),\r\n            };\r\n            // load texture for materials\r\n            for (const material of Object.values(materials)) {\r\n                Object.entries(material)\r\n                .filter(([key]) => key.endsWith('Map'))\r\n                .forEach(([key, filename]) => {\r\n                    let texture = textures[filename];\r\n                    material[key] = texture;\r\n                });\r\n            }\r\n            this.objectData = {\r\n                obj,\r\n                materials,\r\n            };\r\n            this.$refs.page.Init();\r\n        },\r\n    }\r\n}\r\n</script>\r\n","export default\r\n`\r\nattribute vec4 a_position;\r\nattribute vec3 a_normal;\r\nattribute vec3 a_tangent;\r\nattribute vec2 a_texcoord;\r\nattribute vec4 a_color;\r\n\r\nuniform mat4 u_projection;\r\nuniform mat4 u_view;\r\nuniform mat4 u_world;\r\nuniform vec3 u_viewWorldPosition;\r\n\r\nvarying vec3 v_normal;\r\nvarying vec3 v_tangent;\r\nvarying vec3 v_surfaceToView;\r\nvarying vec2 v_texcoord;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n  vec4 worldPosition = u_world * a_position;\r\n  gl_Position = u_projection * u_view * worldPosition;\r\n  v_surfaceToView = u_viewWorldPosition - worldPosition.xyz;\r\n  mat3 normalMat = mat3(u_world);\r\n  v_normal = normalize(normalMat * a_normal);\r\n  v_tangent = normalize(normalMat * a_tangent);\r\n\r\n  v_texcoord = a_texcoord;\r\n  v_color = a_color;\r\n}\r\n`","export default\r\n`\r\nprecision highp float;\r\n\r\nvarying vec3 v_normal;\r\nvarying vec3 v_tangent;\r\nvarying vec3 v_surfaceToView;\r\nvarying vec2 v_texcoord;\r\nvarying vec4 v_color;\r\n\r\nuniform vec3 diffuse;\r\nuniform sampler2D diffuseMap;\r\nuniform vec3 ambient;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform sampler2D specularMap;\r\nuniform float shininess;\r\nuniform sampler2D normalMap;\r\nuniform float opacity;\r\nuniform vec3 u_lightDirection;\r\nuniform vec3 u_ambientLight;\r\n\r\nvoid main () {\r\n  vec3 normal = normalize(v_normal) * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n  vec3 tangent = normalize(v_tangent) * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n  vec3 bitangent = normalize(cross(normal, tangent));\r\n\r\n  mat3 tbn = mat3(tangent, bitangent, normal);\r\n  normal = texture2D(normalMap, v_texcoord).rgb * 2. - 1.;\r\n  normal = normalize(tbn * normal);\r\n\r\n  vec3 surfaceToViewDirection = normalize(v_surfaceToView);\r\n  vec3 halfVector = normalize(u_lightDirection + surfaceToViewDirection);\r\n\r\n  float fakeLight = dot(u_lightDirection, normal) * .5 + .5;\r\n  float specularLight = clamp(dot(normal, halfVector), 0.0, 1.0);\r\n  vec4 specularMapColor = texture2D(specularMap, v_texcoord);\r\n  vec3 effectiveSpecular = specular * specularMapColor.rgb;\r\n\r\n  vec4 diffuseMapColor = texture2D(diffuseMap, v_texcoord);\r\n  vec3 effectiveDiffuse = diffuse * diffuseMapColor.rgb * v_color.rgb;\r\n  float effectiveOpacity = opacity * diffuseMapColor.a * v_color.a;\r\n\r\n  gl_FragColor = vec4(\r\n      emissive +\r\n      ambient * u_ambientLight +\r\n      effectiveDiffuse * fakeLight +\r\n      effectiveSpecular * pow(specularLight, shininess),\r\n      1);\r\n}\r\n\r\n`","import { render } from \"./index.vue?vue&type=template&id=26bf5f68&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createBlock","_component_webgl_basic_render_panel","prop_des_data","$data","prop_ui_setter","$options","prop_vertex_shader","prop_fragment_shader","prop_section_params","ref","onInit","onRender","desData","category","name","buttonContent","title","content","data","gl","canvas","program","vertexShaderSource","fragmentShaderSource","perspective","aspect","fieldOfViewRadians","HNWUEngine","degToRad","zNear","zFar","transform","translation","rotation","scale","camera","target","position","up","sectionParams","lightDirection","x","y","z","texture","page","uiSetter","objectData","objComponentsInfo","objOffset","computed","defaultMaterial","diffuse","diffuseMap","NanoObjParse","this","normalMap","ambient","specular","specularMap","shininess","opacity","setter","type","id","value","min","max","callback","uiSetting","mounted","getObjectData","methods","Init","$refs","getGL","addProgram","clientWidth","clientHeight","set3DViewer","obj","setObjectToSceenCenter","geometries","map","material","object","componentName","addComponent","texcoord","normal","tangent","addBuffer","color","length","numComponents","component","getComponents","materials","createTexture","bindTexture","TEXTURE_2D","level","internalFormat","LUMINANCE","width","height","border","format","UNSIGNED_BYTE","Uint8Array","alignment","pixelStorei","UNPACK_ALIGNMENT","texImage2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","Render","enable","DEPTH_TEST","CULL_FACE","MULTISAMPLE","projectionMatrix","cameraMatrix","lookAt","viewMatrix","inverse","worldMatrix","getTransformMatrix","yRotation","translate3d","forEach","useProgram","sharedUniforms","normalize","uniforms","Object","assign","entries","key","addUniform","setSetters","drawComponent","async","objLink","response","fetch","text","baseLink","URL","window","location","href","matTexts","Promise","all","materialLibs","matHref","filename","join","textures","defaultWhite","values","filter","endsWith","__exports__","render"],"sourceRoot":""}