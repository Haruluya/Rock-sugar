{"version":3,"file":"js/527.ee90eb37.js","mappings":"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","sources":["webpack://rock-sugar/./src/pages/Webgl/WebglScene/Skinning/index.vue","webpack://rock-sugar/./src/pages/Webgl/WebglScene/Skinning/resource/skin-vertex-shader.js","webpack://rock-sugar/./src/pages/Webgl/WebglScene/Skinning/resource/mesh-vertex-shader.js","webpack://rock-sugar/./src/pages/Webgl/WebglScene/Skinning/resource/fragment-shader.js","webpack://rock-sugar/./src/pages/Webgl/HNWUEngine/MeshRenderer.js","webpack://rock-sugar/./src/pages/Webgl/HNWUEngine/SceneNode.js","webpack://rock-sugar/./src/pages/Webgl/HNWUEngine/Skin.js","webpack://rock-sugar/./src/pages/Webgl/HNWUEngine/SkinRenderer.js","webpack://rock-sugar/./src/pages/Webgl/WebglScene/Skinning/index.vue?e371"],"sourcesContent":["<template lang=\"html\">\r\n    <nano_webgl_scene_panel\r\n        :prop_des_data=\"desData\"\r\n        :prop_ui_setter=\"uiSetter\"\r\n        :prop_section_params=\"sectionParams\"\r\n        ref=\"page\"\r\n        @Init=\"Init\"\r\n        @Render=\"Render\"\r\n        @prop_ui_setter=\"uiSetter\"\r\n    />\r\n</template>\r\n<script>\r\nimport data from './resource/data.js'\r\nimport skinVertexShaderSource from './resource/skin-vertex-shader.js'\r\nimport meshVertexShaderSource from './resource/mesh-vertex-shader.js'\r\nimport fragmentShaderSource from './resource/fragment-shader.js'\r\nimport MeshRenderer from '../../HNWUEngine/MeshRenderer'\r\nimport {TRS,Node} from '../../HNWUEngine/SceneNode'\r\nimport Skin from '../../HNWUEngine/Skin'\r\nimport SkinRenderer from '../../HNWUEngine/SkinRenderer'\r\n\r\n\r\nconst desData = {\r\n    category:\"Webgl\",\r\n    name:\"Skinning\",\r\n    buttonContent:\"查看源码\",\r\n    title:\"蒙皮\",\r\n    content:\"Skinning.\"\r\n}\r\nconst accessorTypeToNumComponentsMap = {\r\n    'SCALAR': 1,\r\n    'VEC2': 2,\r\n    'VEC3': 3,\r\n    'VEC4': 4,\r\n    'MAT2': 4,\r\n    'MAT3': 9,\r\n    'MAT4': 16,\r\n};\r\nconst glTypeToTypedArrayMap = {\r\n    '5120': Int8Array,    // gl.BYTE\r\n    '5121': Uint8Array,   // gl.UNSIGNED_BYTE\r\n    '5122': Int16Array,   // gl.SHORT\r\n    '5123': Uint16Array,  // gl.UNSIGNED_SHORT\r\n    '5124': Int32Array,   // gl.INT\r\n    '5125': Uint32Array,  // gl.UNSIGNED_INT\r\n    '5126': Float32Array, // gl.FLOAT\r\n};\r\n\r\nexport default {\r\n    name:'Skinning',\r\n    data() {\r\n        return {\r\n            gl: null,\r\n            desData,\r\n            perspective:{\r\n                aspect:0,\r\n                fieldOfViewRadians:  HNWUEngine.degToRad(60),\r\n                zNear: 1,\r\n                zFar: 2000,\r\n            },\r\n            transform:{\r\n                translation:[0, 0, 0],\r\n                rotation:[HNWUEngine.degToRad(180), HNWUEngine.degToRad(200), HNWUEngine.degToRad(0)],\r\n                scale:[1,1,1]\r\n            },\r\n            camera:{\r\n                target:[0, 0, 0],\r\n                position:[10, 0, 0],\r\n                up:[0,1,0]\r\n            },\r\n            sectionParams:{\r\n                texture:null,\r\n            },\r\n            page:null,\r\n            uiSetter:[],\r\n            gltfData:null,\r\n            origMatrices:null,\r\n            skinProgramInfo:null,\r\n            meshProgramInfo:null,\r\n\r\n        }\r\n    },\r\n    methods: {\r\n        async Init(){\r\n            this.page = this.$refs.page;\r\n            this.gl = this.page.getGL();\r\n            this.gltfData = await this.loadGLTF(\r\n                'https://webglfundamentals.org/webgl/resources/models/killer_whale/whale.CYCLES.gltf'\r\n                );\r\n            //set aspect.\r\n            this.perspective.aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\r\n\r\n            this.skinProgramInfo = HNWUEngine.createProgramInfo(this.gl, [skinVertexShaderSource,fragmentShaderSource ]);\r\n            this.meshProgramInfo = HNWUEngine.createProgramInfo(this.gl, [meshVertexShaderSource,fragmentShaderSource ]);\r\n            const ext = this.gl.getExtension('OES_texture_float');\r\n            if (!ext) {\r\n                console.log(\"NO EXTENSION!\")\r\n                return;  // the extension doesn't exist on this device\r\n            }\r\n            this.origMatrices = new Map();   \r\n\r\n            requestAnimationFrame(this.page.Render);  \r\n        },\r\n        Render(time){\r\n            if(!this.gltfData){\r\n                return;\r\n            }\r\n\r\n            console.log(this.gltfData,\"gltfdata\");\r\n            this.animSkin(this.gltfData.skins[0], Math.sin(time*0.001) * .5);\r\n            \r\n            const sharedUniforms = {\r\n                u_lightDirection: HNWUEngine.normalize([0, 0, 1]),\r\n            };\r\n\r\n            let cameraMatrix = HNWUEngine.lookAt(this.camera.position, this.camera.target, this.camera.up);\r\n            let viewMatrix = HNWUEngine.inverse(cameraMatrix);\r\n            let projectionMatrix = HNWUEngine.perspective(\r\n                this.perspective.fieldOfViewRadians, \r\n                this.perspective.aspect, \r\n                this.perspective.zNear, \r\n                this.perspective.zFar\r\n                );\r\n\r\n            const renderDrawables = (node)=>{\r\n                for (const drawable of node.drawables) {\r\n                    if (drawable.skin){\r\n                        drawable.render(this.gl,this.skinProgramInfo,node, projectionMatrix, viewMatrix, sharedUniforms);\r\n                    }else if(drawable.mesh){\r\n                        drawable.render(this.gl,this.meshProgramInfo,node, projectionMatrix, viewMatrix, sharedUniforms);\r\n                    }else{\r\n                        console.log(\"drawable have not renderer.\")\r\n                    }\r\n                   \r\n                }\r\n            }\r\n\r\n            for (const scene of this.gltfData.scenes) {\r\n                // updatte all world matices in the scene.\r\n                scene.root.updateWorldMatrix();\r\n                // walk the scene and render all renderables\r\n                scene.root.traverse(renderDrawables);\r\n\r\n            }\r\n            requestAnimationFrame(this.page.Render);  \r\n        },\r\n                    \r\n        animSkin(skin, a) {\r\n            for (let i = 0; i < skin.joints.length; ++i) {\r\n                const joint = skin.joints[i];\r\n                // if there is no matrix saved for this joint\r\n                if (!this.origMatrices.has(joint)) {\r\n                    // save a matrix for joint\r\n                    this.origMatrices.set(joint, joint.source.getMatrix());\r\n                }\r\n                // get the original matrix\r\n                const origMatrix = this.origMatrices.get(joint);\r\n                // rotate it\r\n                const m = HNWUEngine.xRotate(origMatrix, a);\r\n                // decompose it back into position, rotation, scale\r\n                // into the joint\r\n                HNWUEngine.decompose(m, joint.source.position, joint.source.rotation, joint.source.scale);\r\n            }\r\n        },\r\n        accessorTypeToNumComponents(type) {\r\n            return accessorTypeToNumComponentsMap[type] || throwNoKey(type);\r\n        },\r\n\r\n        glTypeToTypedArray(type) {\r\n            return glTypeToTypedArrayMap[type] || throwNoKey(type);\r\n        },\r\n\r\n        getAccessorTypedArrayAndStride(gl, gltf, accessorIndex) {\r\n            const accessor = gltf.accessors[accessorIndex];\r\n            const bufferView = gltf.bufferViews[accessor.bufferView];\r\n            const TypedArray = this.glTypeToTypedArray(accessor.componentType);\r\n            const buffer = gltf.buffers[bufferView.buffer];\r\n            return {\r\n            accessor,\r\n            array: new TypedArray(\r\n                buffer,\r\n                bufferView.byteOffset + (accessor.byteOffset || 0),\r\n                accessor.count * this.accessorTypeToNumComponents(accessor.type)),\r\n            stride: bufferView.byteStride || 0,\r\n            };\r\n        },\r\n        //通过accessor获得buffer.\r\n        getAccessorAndWebGLBuffer(gl, gltf, accessorIndex) {\r\n            const accessor = gltf.accessors[accessorIndex];\r\n            const bufferView = gltf.bufferViews[accessor.bufferView];\r\n            if (!bufferView.webglBuffer) {\r\n                const buffer = gl.createBuffer();\r\n                const target = bufferView.target || gl.ARRAY_BUFFER;\r\n                const arrayBuffer = gltf.buffers[bufferView.buffer];\r\n                const data = new Uint8Array(arrayBuffer, bufferView.byteOffset, bufferView.byteLength);\r\n                gl.bindBuffer(target, buffer);\r\n                gl.bufferData(target, data, gl.STATIC_DRAW);\r\n                bufferView.webglBuffer = buffer;\r\n            }\r\n            return {\r\n                accessor,\r\n                buffer: bufferView.webglBuffer,\r\n                stride: bufferView.stride || 0,\r\n            };\r\n        },\r\n        async loadGLTF(url) {\r\n            const gl = this.gl;\r\n            //gltf josn.\r\n            const gltf = await this.loadJSON(url);\r\n            // load all the referenced files relative to the gltf file\r\n            const baseURL = new URL(url, location.href);\r\n            gltf.buffers = await Promise.all(gltf.buffers.map((buffer) => {\r\n                const url = new URL(buffer.uri, baseURL.href);\r\n                return this.loadBinary(url.href);\r\n            }));\r\n\r\n            const defaultMaterial = {\r\n                uniforms: {\r\n                    u_diffuse: [1, 1, 1, 1],\r\n                },\r\n            };\r\n\r\n            // setup meshes\r\n            gltf.meshes.forEach((mesh) => {\r\n                mesh.primitives.forEach((primitive) => {\r\n                    const attribs = {};\r\n                    let numElements;\r\n                    //通过mesh获取buffer数据。\r\n                    for (const [attribName, index] of Object.entries(primitive.attributes)) {\r\n                        const {accessor, buffer, stride} = this.getAccessorAndWebGLBuffer(gl, gltf, index);\r\n                        numElements = accessor.count;\r\n                        attribs[`a_${attribName}`] = {\r\n                            buffer,\r\n                            type: accessor.componentType,\r\n                            numComponents: this.accessorTypeToNumComponents(accessor.type),\r\n                            stride,\r\n                            offset: accessor.byteOffset | 0,\r\n                        };\r\n                    }   \r\n\r\n                    const bufferInfo = {\r\n                        attribs,\r\n                        numElements,\r\n                    };\r\n\r\n                    if (primitive.indices !== undefined) {\r\n                        const {accessor, buffer} = this.getAccessorAndWebGLBuffer(gl, gltf, primitive.indices);\r\n                        bufferInfo.numElements = accessor.count;\r\n                        bufferInfo.indices = buffer;\r\n                        bufferInfo.elementType = accessor.componentType;\r\n                    }\r\n\r\n                    primitive.bufferInfo = bufferInfo;\r\n\r\n                    // save the material info for this primitive\r\n                    primitive.material = gltf.materials && gltf.materials[primitive.material] || defaultMaterial;\r\n                });\r\n            });\r\n\r\n            const skinNodes = [];\r\n            const origNodes = gltf.nodes;\r\n            gltf.nodes = gltf.nodes.map((n) => {\r\n                const {name, skin, mesh, translation, rotation, scale} = n;\r\n                const trs = new TRS(translation, rotation, scale);\r\n                const node = new Node(trs, name);\r\n                const realMesh = gltf.meshes[mesh];\r\n                if (skin !== undefined) {\r\n                    skinNodes.push({node, mesh: realMesh, skinNdx: skin});\r\n                } else if (realMesh) {\r\n                    node.drawables.push(new MeshRenderer(realMesh));\r\n                }\r\n                return node;\r\n            });\r\n\r\n            // setup skins\r\n            gltf.skins = gltf.skins.map((skin) => {\r\n                const joints = skin.joints.map(ndx => gltf.nodes[ndx]);\r\n                const {array} = this.getAccessorTypedArrayAndStride(gl, gltf, skin.inverseBindMatrices);\r\n                return new Skin(gl,joints, array);\r\n            });\r\n\r\n            // Add SkinRenderers to nodes with skins\r\n            for (const {node, mesh, skinNdx} of skinNodes) {\r\n                node.drawables.push(new SkinRenderer(mesh, gltf.skins[skinNdx]));\r\n            }\r\n\r\n            // arrange nodes into graph\r\n            gltf.nodes.forEach((node, ndx) => {\r\n                const children = origNodes[ndx].children;\r\n                if (children) {\r\n                    this.addChildren(gltf.nodes, node, children);\r\n                }\r\n            });\r\n\r\n            // setup scenes\r\n            for (const scene of gltf.scenes) {\r\n                scene.root = new Node(new TRS(), scene.name);\r\n                this.addChildren(gltf.nodes, scene.root, scene.nodes);\r\n            }\r\n\r\n            return gltf;\r\n        },\r\n\r\n        addChildren(nodes, node, childIndices) {\r\n            childIndices.forEach((childNdx) => {\r\n                const child = nodes[childNdx];\r\n                child.setParent(node);\r\n            });\r\n        },\r\n\r\n        async loadFile(url, typeFunc) {\r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n            throw new Error(`could not load: ${url}`);\r\n            }\r\n            return await response[typeFunc]();\r\n        },\r\n\r\n        async loadBinary(url) {\r\n            return this.loadFile(url, 'arrayBuffer');\r\n        },\r\n\r\n        async loadJSON(url) {\r\n            return this.loadFile(url, 'json');\r\n        },\r\n    }\r\n\r\n}\r\n\r\n</script>","export default\r\n`\r\nattribute vec4 a_POSITION;\r\nattribute vec3 a_NORMAL;\r\nattribute vec4 a_WEIGHTS_0;\r\nattribute vec4 a_JOINTS_0;\r\n\r\nuniform mat4 u_projection;\r\nuniform mat4 u_view;\r\nuniform mat4 u_world;\r\nuniform sampler2D u_jointTexture;\r\nuniform float u_numJoints;\r\n\r\nvarying vec3 v_normal;\r\n\r\n// these offsets assume the texture is 4 pixels across\r\n#define ROW0_U ((0.5 + 0.0) / 4.)\r\n#define ROW1_U ((0.5 + 1.0) / 4.)\r\n#define ROW2_U ((0.5 + 2.0) / 4.)\r\n#define ROW3_U ((0.5 + 3.0) / 4.)\r\n\r\nmat4 getBoneMatrix(float jointNdx) {\r\n  float v = (jointNdx + 0.5) / u_numJoints;\r\n  return mat4(\r\n    texture2D(u_jointTexture, vec2(ROW0_U, v)),\r\n    texture2D(u_jointTexture, vec2(ROW1_U, v)),\r\n    texture2D(u_jointTexture, vec2(ROW2_U, v)),\r\n    texture2D(u_jointTexture, vec2(ROW3_U, v)));\r\n}\r\n\r\nvoid main() {\r\n  mat4 skinMatrix = getBoneMatrix(a_JOINTS_0[0]) * a_WEIGHTS_0[0] +\r\n                    getBoneMatrix(a_JOINTS_0[1]) * a_WEIGHTS_0[1] +\r\n                    getBoneMatrix(a_JOINTS_0[2]) * a_WEIGHTS_0[2] +\r\n                    getBoneMatrix(a_JOINTS_0[3]) * a_WEIGHTS_0[3];\r\n  mat4 world = u_world * skinMatrix;\r\n  gl_Position = u_projection * u_view * world * a_POSITION;\r\n  v_normal = mat3(world) * a_NORMAL;\r\n\r\n  // for debugging .. see article\r\n  //gl_Position = u_projection * u_view *  a_POSITION;\r\n  //v_normal = a_NORMAL;\r\n  //v_normal = a_WEIGHTS_0.xyz * 2. - 1.;\r\n  //v_normal = a_JOINTS_0.xyz / (u_numJoints - 1.) * 2. - 1.;\r\n}\r\n`\r\n","export default\r\n`\r\nattribute vec4 a_POSITION;\r\nattribute vec3 a_NORMAL;\r\n\r\nuniform mat4 u_projection;\r\nuniform mat4 u_view;\r\nuniform mat4 u_world;\r\n\r\nvarying vec3 v_normal;\r\n\r\nvoid main() {\r\n  gl_Position = u_projection * u_view * u_world * a_POSITION;\r\n  v_normal = mat3(u_world) * a_NORMAL;\r\n}\r\n\r\n`","export default\r\n`\r\nprecision mediump float;\r\n\r\nvarying vec3 v_normal;\r\n\r\nuniform vec4 u_diffuse;\r\nuniform vec3 u_lightDirection;\r\n\r\nvoid main () {\r\n  vec3 normal = normalize(v_normal);\r\n  float light = dot(u_lightDirection, normal) * .5 + .5;\r\n  // gl_FragColor = vec4(u_diffuse.rgb , u_diffuse.a);\r\n\r\n  // for debugging .. see article\r\n  gl_FragColor = vec4(1, 0, 0, 1);\r\n  gl_FragColor = vec4(v_normal * .5 + .5, 1);\r\n}\r\n\r\n`\r\n\r\n","export default class MeshRenderer {\r\n    constructor(mesh) {\r\n      this.mesh = mesh;\r\n    }\r\n    render(node, projection, view, sharedUniforms) {\r\n      const {mesh} = this;\r\n      gl.useProgram(meshProgramInfo.program);\r\n      for (const primitive of mesh.primitives) {\r\n        HNWUEngine.setBuffersAndAttributes(gl, meshProgramInfo, primitive.bufferInfo);\r\n        HNWUEngine.setUniforms(meshProgramInfo, {\r\n          u_projection: projection,\r\n          u_view: view,\r\n          u_world: node.worldMatrix,\r\n        });\r\n        HNWUEngine.setUniforms(meshProgramInfo, primitive.material.uniforms);\r\n        HNWUEngine.setUniforms(meshProgramInfo, sharedUniforms);\r\n        HNWUEngine.drawBufferInfo(gl, primitive.bufferInfo);\r\n      }\r\n    }\r\n}","class TRS {\r\n    constructor(position = [0, 0, 0], rotation = [0, 0, 0, 1], scale = [1, 1, 1]) {\r\n      this.position = position;\r\n      this.rotation = rotation;\r\n      this.scale = scale;\r\n    }\r\n    getMatrix(dst) {\r\n      dst = dst || new Float32Array(16);\r\n      HNWUEngine.compose(this.position, this.rotation, this.scale, dst);\r\n      return dst;\r\n    }\r\n}\r\n\r\n\r\nclass Node {\r\n    constructor(source, name) {\r\n        this.name = name;\r\n        this.source = source;\r\n        this.parent = null;\r\n        this.children = [];\r\n        this.localMatrix = HNWUEngine.identity();\r\n        this.worldMatrix = HNWUEngine.identity();\r\n        this.drawables = [];\r\n    }\r\n    setParent(parent) {\r\n        if (this.parent) {\r\n            this.parent._removeChild(this);\r\n            this.parent = null;\r\n        }\r\n        if (parent) {\r\n            parent._addChild(this);\r\n            this.parent = parent;\r\n        }\r\n    }\r\n    updateWorldMatrix(parentWorldMatrix) {\r\n        const source = this.source;\r\n        if (source) {\r\n            source.getMatrix(this.localMatrix);\r\n        }\r\n\r\n        if (parentWorldMatrix) {\r\n            // 一个矩阵传入，所以做数学运算\r\n            HNWUEngine.multiply3d(parentWorldMatrix, this.localMatrix, this.worldMatrix);\r\n        } else {\r\n            // 没有矩阵传入，所以只是拷贝局部矩阵到世界矩阵\r\n            HNWUEngine.copy(this.localMatrix, this.worldMatrix);\r\n        }\r\n\r\n        // 现在处理所有子\r\n        const worldMatrix = this.worldMatrix;\r\n        for (const child of this.children) {\r\n            child.updateWorldMatrix(worldMatrix);\r\n        }\r\n    }\r\n    traverse(fn) {\r\n        fn(this);\r\n        for (const child of this.children) {\r\n            child.traverse(fn);\r\n        }\r\n    }\r\n    _addChild(child) {\r\n        this.children.push(child);\r\n    }\r\n    _removeChild(child) {\r\n        const ndx = this.children.indexOf(child);\r\n        this.children.splice(ndx, 1);\r\n    }\r\n}\r\n\r\nexport {\r\n    TRS,\r\n    Node\r\n}\r\n\r\n","export default class Skin {\r\n    constructor(gl,joints, inverseBindMatrixData) {\r\n      this.joints = joints;\r\n      this.inverseBindMatrices = [];\r\n      this.jointMatrices = [];\r\n      // 为每个关节矩阵分配足够的空间\r\n      this.jointData = new Float32Array(joints.length * 16);\r\n      // 为每个关节和绑定逆矩阵创建视图\r\n      for (let i = 0; i < joints.length; ++i) {\r\n        this.inverseBindMatrices.push(new Float32Array(\r\n            inverseBindMatrixData.buffer,\r\n            inverseBindMatrixData.byteOffset + Float32Array.BYTES_PER_ELEMENT * 16 * i,\r\n            16));\r\n        this.jointMatrices.push(new Float32Array(\r\n            this.jointData.buffer,\r\n            Float32Array.BYTES_PER_ELEMENT * 16 * i,\r\n            16));\r\n      }\r\n      // 创建存储关节矩阵的纹理\r\n      this.jointTexture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, this.jointTexture);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    }\r\n    update(gl,node) {\r\n      const globalWorldInverse = HNWUEngine.inverse(node.worldMatrix);\r\n      // 遍历每个关节获得当前世界矩阵\r\n      // 来计算绑定矩阵的逆 \r\n      // 并在纹理中存储整个结果\r\n      for (let j = 0; j < this.joints.length; ++j) {\r\n        const joint = this.joints[j];\r\n        const dst = this.jointMatrices[j];\r\n        HNWUEngine.multiply3d(globalWorldInverse, joint.worldMatrix, dst);\r\n        HNWUEngine.multiply3d(dst, this.inverseBindMatrices[j], dst);\r\n      }\r\n      gl.bindTexture(gl.TEXTURE_2D, this.jointTexture);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 4, this.joints.length, 0,\r\n                    gl.RGBA, gl.FLOAT, this.jointData);\r\n    }\r\n}","export default class SkinRenderer {\r\n    constructor(mesh, skin) {\r\n      this.mesh = mesh;\r\n      this.skin = skin;\r\n    }\r\n    render(gl,skinProgramInfo,node, projection, view, sharedUniforms) {\r\n      const {skin, mesh} = this;\r\n      skin.update(gl,node);\r\n      gl.useProgram(skinProgramInfo.program);\r\n      for (const primitive of mesh.primitives) {\r\n        HNWUEngine.setBuffersAndAttributes(gl, skinProgramInfo, primitive.bufferInfo);\r\n        HNWUEngine.setUniforms(skinProgramInfo, {\r\n          u_projection: projection,\r\n          u_view: view,\r\n          u_world: node.worldMatrix,\r\n          u_jointTexture: skin.jointTexture,\r\n          u_numJoints: skin.joints.length,\r\n        });\r\n        if(primitive.material.uniforms){\r\n          HNWUEngine.setUniforms(skinProgramInfo, primitive.material.uniforms);\r\n        }\r\n        HNWUEngine.setUniforms(skinProgramInfo, sharedUniforms);\r\n        HNWUEngine.drawBufferInfo(gl, primitive.bufferInfo);\r\n      }\r\n    }\r\n}","import { render } from \"./index.vue?vue&type=template&id=8d2f642e&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createBlock","_component_nano_webgl_scene_panel","prop_des_data","$data","prop_ui_setter","prop_section_params","ref","onInit","$options","onRender","onProp_ui_setter","MeshRenderer","constructor","mesh","this","render","node","projection","view","sharedUniforms","gl","useProgram","meshProgramInfo","program","primitive","primitives","HNWUEngine","setBuffersAndAttributes","bufferInfo","setUniforms","u_projection","u_view","u_world","worldMatrix","material","uniforms","drawBufferInfo","TRS","position","rotation","scale","getMatrix","dst","Float32Array","compose","Node","source","name","parent","children","localMatrix","identity","drawables","setParent","_removeChild","_addChild","updateWorldMatrix","parentWorldMatrix","multiply3d","copy","child","traverse","fn","push","ndx","indexOf","splice","Skin","joints","inverseBindMatrixData","inverseBindMatrices","jointMatrices","jointData","length","i","buffer","byteOffset","BYTES_PER_ELEMENT","jointTexture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","update","globalWorldInverse","inverse","j","joint","texImage2D","RGBA","FLOAT","SkinRenderer","skin","skinProgramInfo","u_jointTexture","u_numJoints","desData","category","buttonContent","title","content","accessorTypeToNumComponentsMap","glTypeToTypedArrayMap","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","data","perspective","aspect","fieldOfViewRadians","degToRad","zNear","zFar","transform","translation","camera","target","up","sectionParams","texture","page","uiSetter","gltfData","origMatrices","methods","async","$refs","getGL","loadGLTF","canvas","clientWidth","clientHeight","createProgramInfo","skinVertexShaderSource","fragmentShaderSource","meshVertexShaderSource","ext","getExtension","Map","requestAnimationFrame","Render","console","log","time","animSkin","skins","Math","sin","u_lightDirection","normalize","cameraMatrix","lookAt","viewMatrix","projectionMatrix","renderDrawables","drawable","scene","scenes","root","a","has","set","origMatrix","get","m","xRotate","decompose","accessorTypeToNumComponents","type","throwNoKey","glTypeToTypedArray","getAccessorTypedArrayAndStride","gltf","accessorIndex","accessor","accessors","bufferView","bufferViews","TypedArray","componentType","buffers","array","count","stride","byteStride","getAccessorAndWebGLBuffer","webglBuffer","createBuffer","ARRAY_BUFFER","arrayBuffer","byteLength","bindBuffer","bufferData","STATIC_DRAW","url","loadJSON","baseURL","URL","location","href","Promise","all","map","uri","loadBinary","defaultMaterial","u_diffuse","meshes","forEach","attribs","numElements","attribName","index","Object","entries","attributes","numComponents","offset","undefined","indices","elementType","materials","skinNodes","origNodes","nodes","n","trs","realMesh","skinNdx","addChildren","childIndices","childNdx","typeFunc","response","fetch","ok","Error","loadFile","__exports__"],"sourceRoot":""}