{"version":3,"file":"js/462.ab2f570d.js","mappings":"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","sources":["webpack://rock-sugar/./src/pages/WebglDemo/DataTexture/index.vue","webpack://rock-sugar/./src/pages/WebglDemo/DataTexture/index.vue?52b0"],"sourcesContent":["<template lang=\"html\">\r\n    <div class=\"webglContainer\">\r\n        <div class=\"canvesContainer\">\r\n            <canvas id=\"canvas\">\r\n                <pre  id=\"vertex-shader\" type=\"x-shader/x-vertex\">\r\n                    attribute vec4 a_position;\r\n                    attribute vec2 a_texcoord;\r\n                    \r\n                    uniform mat4 u_matrix;\r\n                    \r\n                    varying vec2 v_texcoord;\r\n                    \r\n                    void main() {\r\n                      // Multiply the position by the matrix.\r\n                      gl_Position = u_matrix * a_position;\r\n                    \r\n                      // Pass the texcoord to the fragment shader.\r\n                      v_texcoord = a_texcoord;\r\n                    }\r\n                </pre>\r\n            \r\n                <pre  id=\"fragment-shader\" type=\"x-shader/x-fragment\">\r\n                    precision mediump float;\r\n            \r\n                    // Passed in from the vertex shader.\r\n                    varying vec2 v_texcoord;\r\n                    \r\n                    // The texture.\r\n                    uniform sampler2D u_texture;\r\n                    \r\n                    void main() {\r\n                       gl_FragColor = texture2D(u_texture, v_texcoord);\r\n                    }\r\n                </pre>\r\n            </canvas>\r\n        </div>\r\n    </div>\r\n    <div class=\"desContainer\">\r\n        <div class=\"des\">\r\n            <div class=\"title\">\r\n                <span id=\"category\">webgl</span>\r\n                <span id=\"name\">DataTexture</span>\r\n            </div>\r\n            <div class=\"codeLink\">\r\n                <nano_button @handleClick=\"handleClick\"></nano_button>\r\n            </div>\r\n        </div>\r\n        <div class=\"conclusion\">\r\n            <span class=\"title\"><span id=\"conTitle\">程序纹理</span></span>\r\n            <span class=\"content\">The next is DataHuman.</span>\r\n        </div>\r\n        <div class=\"menu\">\r\n            <nano_items_menu></nano_items_menu>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n<script>\r\nexport default {\r\n    name:'DataTexture',\r\n    mounted(){\r\n        this.Render();\r\n    },\r\n    methods:{\r\n        Render(){\r\n function setGeometry(gl) {\r\n        var positions = new Float32Array(\r\n        [   \r\n            -0.5, -0.5,  -0.5,\r\n            -0.5,  0.5,  -0.5,\r\n            0.5, -0.5,  -0.5,\r\n            -0.5,  0.5,  -0.5,\r\n            0.5,  0.5,  -0.5,\r\n            0.5, -0.5,  -0.5,\r\n\r\n            -0.5, -0.5,   0.5,\r\n            0.5, -0.5,   0.5,\r\n            -0.5,  0.5,   0.5,\r\n            -0.5,  0.5,   0.5,\r\n            0.5, -0.5,   0.5,\r\n            0.5,  0.5,   0.5,\r\n\r\n            -0.5,   0.5, -0.5,\r\n            -0.5,   0.5,  0.5,\r\n            0.5,   0.5, -0.5,\r\n            -0.5,   0.5,  0.5,\r\n            0.5,   0.5,  0.5,\r\n            0.5,   0.5, -0.5,\r\n\r\n            -0.5,  -0.5, -0.5,\r\n            0.5,  -0.5, -0.5,\r\n            -0.5,  -0.5,  0.5,\r\n            -0.5,  -0.5,  0.5,\r\n            0.5,  -0.5, -0.5,\r\n            0.5,  -0.5,  0.5,\r\n\r\n            -0.5,  -0.5, -0.5,\r\n            -0.5,  -0.5,  0.5,\r\n            -0.5,   0.5, -0.5,\r\n            -0.5,  -0.5,  0.5,\r\n            -0.5,   0.5,  0.5,\r\n            -0.5,   0.5, -0.5,\r\n\r\n            0.5,  -0.5, -0.5,\r\n            0.5,   0.5, -0.5,\r\n            0.5,  -0.5,  0.5,\r\n            0.5,  -0.5,  0.5,\r\n            0.5,   0.5, -0.5,\r\n            0.5,   0.5,  0.5,\r\n\r\n            ]);\r\n        gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\r\n        }\r\n\r\n        // Fill the buffer with texture coordinates the cube.\r\n        function setTexcoords(gl) {\r\n        gl.bufferData(\r\n            gl.ARRAY_BUFFER,\r\n            new Float32Array(\r\n                [\r\n                0, 0,\r\n                0, 1,\r\n                1, 0,\r\n                0, 1,\r\n                1, 1,\r\n                1, 0,\r\n\r\n                0, 0,\r\n                0, 1,\r\n                1, 0,\r\n                1, 0,\r\n                0, 1,\r\n                1, 1,\r\n\r\n                0, 0,\r\n                0, 1,\r\n                1, 0,\r\n                0, 1,\r\n                1, 1,\r\n                1, 0,\r\n\r\n                0, 0,\r\n                0, 1,\r\n                1, 0,\r\n                1, 0,\r\n                0, 1,\r\n                1, 1,\r\n\r\n                0, 0,\r\n                0, 1,\r\n                1, 0,\r\n                0, 1,\r\n                1, 1,\r\n                1, 0,\r\n\r\n                0, 0,\r\n                0, 1,\r\n                1, 0,\r\n                1, 0,\r\n                0, 1,\r\n                1, 1,\r\n\r\n            ]),\r\n            gl.STATIC_DRAW);\r\n        }\r\n\r\n\r\n        var canvas = document.querySelector(\"#canvas\");\r\n        var gl = canvas.getContext(\"webgl\");\r\n        if (!gl) {\r\n            return;\r\n        }\r\n\r\n\r\n        var program = haruluya_webgl_utils.createProgramFromScripts(gl, [\"vertex-shader\", \"fragment-shader\"]);\r\n\r\n        // look up where the vertex data needs to go.\r\n        var positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n        var texcoordLocation = gl.getAttribLocation(program, \"a_texcoord\");\r\n\r\n        // lookup uniforms\r\n        var matrixLocation = gl.getUniformLocation(program, \"u_matrix\");\r\n        var textureLocation = gl.getUniformLocation(program, \"u_texture\");\r\n\r\n        var positionBuffer = gl.createBuffer();\r\n        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n        // Put the positions in the buffer\r\n        setGeometry(gl);\r\n\r\n        // provide texture coordinates for the rectangle.\r\n        var texcoordBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\r\n        // Set Texcoords.\r\n        setTexcoords(gl);\r\n\r\n        // Create a texture.\r\n        var texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n        // fill texture with 3x2 pixels\r\n        const level = 0;\r\n        const internalFormat = gl.LUMINANCE;\r\n        const width = 3;\r\n        const height = 2;\r\n        const border = 0;\r\n        const format = gl.LUMINANCE;\r\n        const type = gl.UNSIGNED_BYTE;\r\n        const data = new Uint8Array([\r\n            128,  64, 128,\r\n            0, 192,   0,\r\n        ]);\r\n        const alignment = 1;\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);\r\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border,\r\n                        format, type, data);\r\n\r\n        // set the filtering so we don't need mips and it's not filtered\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        function degToRad(d) {\r\n            return d * Math.PI / 180;\r\n        }\r\n\r\n        var fieldOfViewRadians = degToRad(60);\r\n        var modelXRotationRadians = degToRad(0);\r\n        var modelYRotationRadians = degToRad(0);\r\n\r\n        // Get the starting time.\r\n        var then = 0;\r\n\r\n        requestAnimationFrame(drawScene);\r\n\r\n        // Draw the scene.\r\n        function drawScene(time) {\r\n            // convert to seconds\r\n            time *= 0.001;\r\n            // Subtract the previous time from the current time\r\n            var deltaTime = time - then;\r\n            // Remember the current time for the next frame.\r\n            then = time;\r\n\r\n            haruluya_webgl_utils.resizeCanvasToDisplaySize(gl.canvas);\r\n\r\n            // Tell WebGL how to convert from clip space to pixels\r\n            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n            gl.enable(gl.CULL_FACE);\r\n            gl.enable(gl.DEPTH_TEST);\r\n\r\n            // Animate the rotation\r\n            modelYRotationRadians += -0.7 * deltaTime;\r\n            modelXRotationRadians += -0.4 * deltaTime;\r\n\r\n            // Clear the canvas AND the depth buffer.\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n            // Tell it to use our program (pair of shaders)\r\n            gl.useProgram(program);\r\n\r\n            // Turn on the position attribute\r\n            gl.enableVertexAttribArray(positionLocation);\r\n\r\n            // Bind the position buffer.\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n            // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n            var size = 3;          // 3 components per iteration\r\n            var type = gl.FLOAT;   // the data is 32bit floats\r\n            var normalize = false; // don't normalize the data\r\n            var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            var offset = 0;        // start at the beginning of the buffer\r\n            gl.vertexAttribPointer(\r\n                positionLocation, size, type, normalize, stride, offset);\r\n\r\n            // Turn on the texcoord attribute\r\n            gl.enableVertexAttribArray(texcoordLocation);\r\n\r\n            // bind the texcoord buffer.\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\r\n\r\n            // Tell the texcoord attribute how to get data out of texcoordBuffer (ARRAY_BUFFER)\r\n            var size = 2;          // 2 components per iteration\r\n            var type = gl.FLOAT;   // the data is 32bit floats\r\n            var normalize = false; // don't normalize the data\r\n            var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            var offset = 0;        // start at the beginning of the buffer\r\n            gl.vertexAttribPointer(\r\n                texcoordLocation, size, type, normalize, stride, offset);\r\n\r\n            // Compute the projection matrix\r\n            var aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n            var projectionMatrix =\r\n                haruluya_webgl_utils.perspective(fieldOfViewRadians, aspect, 1, 2000);\r\n\r\n            var cameraPosition = [0, 0, 2];\r\n            var up = [0, 1, 0];\r\n            var target = [0, 0, 0];\r\n\r\n            // Compute the camera's matrix using look at.\r\n            var cameraMatrix = haruluya_webgl_utils.lookAt(cameraPosition, target, up);\r\n\r\n            // Make a view matrix from the camera matrix.\r\n            var viewMatrix = haruluya_webgl_utils.inverse(cameraMatrix);\r\n\r\n            var viewProjectionMatrix = haruluya_webgl_utils.multiply3d(projectionMatrix, viewMatrix);\r\n\r\n            var matrix = haruluya_webgl_utils.xRotate(viewProjectionMatrix, modelXRotationRadians);\r\n            matrix = haruluya_webgl_utils.yRotate(matrix, modelYRotationRadians);\r\n\r\n            // Set the matrix.\r\n            gl.uniformMatrix4fv(matrixLocation, false, matrix);\r\n\r\n            // Tell the shader to use texture unit 0 for u_texture\r\n            gl.uniform1i(textureLocation, 0);\r\n\r\n            // Draw the geometry.\r\n            gl.drawArrays(gl.TRIANGLES, 0, 6 * 6);\r\n\r\n            requestAnimationFrame(drawScene);\r\n        }\r\n\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n@import \"../index.less\";\r\n</style>","import { render } from \"./index.vue?vue&type=template&id=4a92b167&scoped=true&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=4a92b167&lang=less&scoped=true\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4a92b167\"]])\n\nexport default __exports__"],"names":["class","_createElementVNode","id","_hoisted_1","_hoisted_4","_createVNode","_component_nano_button","onHandleClick","_ctx","_hoisted_6","_component_nano_items_menu","name","mounted","this","Render","methods","setGeometry","gl","positions","Float32Array","bufferData","ARRAY_BUFFER","STATIC_DRAW","setTexcoords","canvas","document","querySelector","getContext","program","haruluya_webgl_utils","createProgramFromScripts","positionLocation","getAttribLocation","texcoordLocation","matrixLocation","getUniformLocation","textureLocation","positionBuffer","createBuffer","bindBuffer","texcoordBuffer","texture","createTexture","bindTexture","TEXTURE_2D","level","internalFormat","LUMINANCE","width","height","border","format","type","UNSIGNED_BYTE","data","Uint8Array","alignment","degToRad","d","Math","PI","pixelStorei","UNPACK_ALIGNMENT","texImage2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","fieldOfViewRadians","modelXRotationRadians","modelYRotationRadians","then","drawScene","time","deltaTime","resizeCanvasToDisplaySize","viewport","enable","CULL_FACE","DEPTH_TEST","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","enableVertexAttribArray","size","FLOAT","normalize","stride","offset","vertexAttribPointer","aspect","clientWidth","clientHeight","projectionMatrix","perspective","cameraPosition","up","target","cameraMatrix","lookAt","viewMatrix","inverse","viewProjectionMatrix","multiply3d","matrix","xRotate","yRotate","uniformMatrix4fv","uniform1i","drawArrays","TRIANGLES","requestAnimationFrame","__exports__","render"],"sourceRoot":""}