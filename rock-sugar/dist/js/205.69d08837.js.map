{"version":3,"file":"js/205.69d08837.js","mappings":"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","sources":["webpack://rock-sugar/./src/pages/CG/Experiment/EdgeTablePolygon/index.vue","webpack://rock-sugar/./src/pages/CG/Experiment/Interfaces/Polygon.js","webpack://rock-sugar/./src/pages/CG/Experiment/Interfaces/Edge.js","webpack://rock-sugar/./src/pages/CG/Experiment/EdgeTablePolygon/index.vue?124c"],"sourcesContent":["<template lang=\"html\">\r\n    <nano_cg_experiment_page :prop_des_data=\"desData\" :prop_ui_setter=\"uiSetter\" :prop_section_params=\"sectionParams\"\r\n        ref=\"page\" />\r\n</template>\r\n<script>\r\n\r\n\r\n\r\nimport uiSetting from \"../ui-setting\"\r\nimport { Edge, Polygon } from \"../Interfaces\"\r\n\r\n\r\nconst desData = {\r\n    category: \"Experiment\",\r\n    name: \"EdgeTablePolygon\",\r\n    buttonContent: \"查看源码\",\r\n    title: \"多边形有序边表\",\r\n    content: \"Edge table polygon.\"\r\n}\r\n\r\n\r\n/*\r\n    @author:haruluya\r\n    @des: Ex07 EdgeTablePolygon.\r\n*/\r\n\r\nexport default {\r\n    name: \"EdgeTablePolygon\",\r\n    data() {\r\n        return {\r\n            canvas: null,\r\n            ctx: null,\r\n            // component data.\r\n            desData,\r\n            // params of page.\r\n            sectionParams: {\r\n                points: [{ x: 20, y: 20 }, { x: 20, y: 70 }, { x: 50, y: 50 }, { x: 110, y: 60 }, { x: 110, y: 30 }, { x: 50, y: 10 }],\r\n                color:'#0bc6e3',\r\n                debugContent: null,\r\n                girdSize: 5,\r\n            }\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        //uiSetter.\r\n        uiSetter() {\r\n            let sectionParams = this.sectionParams;\r\n            let setter = [\r\n                {\r\n                    type: \"slider\", id: \"girdSize\", value: sectionParams.girdSize, min: 1, max: 100,\r\n                    callback: uiSetting.globalUiCallbacks.updateValue(this, \"girdSize\")\r\n                },\r\n                { type: \"color\",id: \"color\",default: sectionParams.color, callback: uiSetting.globalUiCallbacks.updateValue(this, \"color\")}\r\n            ];\r\n            for (let i= 0; i < this.sectionParams.points.length; i++){\r\n                setter.push(\r\n                 { type: \"slider-vector\", id: \"point\"+i , value: sectionParams.points[i], min: { x: 0, y: 0 }, max: { x: 500, y: 500 }, callback: uiSetting.globalUiCallbacks.updatePointArray(this, \"points\", i) },\r\n                )\r\n            }\r\n            return setter;\r\n        },\r\n\r\n    },\r\n    methods: {\r\n        Init() {\r\n            this.$refs.page.Init();\r\n\r\n            this.canvas = this.$refs.page.getCanvas();\r\n            this.ctx = canvas.getContext('2d');\r\n\r\n            this.Render();\r\n        },\r\n        Render() {\r\n            this.$refs.page.Render();\r\n\r\n            const ctx = this.ctx;\r\n            const sectionParams = this.sectionParams;\r\n            const gridx = parseInt(this.canvas.width / this.sectionParams.girdSize) - 1;\r\n            const gridy = parseInt(this.canvas.height / this.sectionParams.girdSize) - 1;\r\n\r\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n            uiSetting.drawGrid(this);\r\n\r\n            this.sectionParams.debugContent = [{\r\n                title: \"grid\", content: \"The number of cells in the x direction: \" + gridx + \"\\nThe number of cells in the y direction: \" + gridy,\r\n            }];\r\n\r\n            ctx.fillStyle = sectionParams.color;\r\n\r\n\r\n            // EdgeTablePolygon.\r\n            // check amount of point.\r\n            const points = new Polygon(this.sectionParams.points);\r\n            if (points.size() < 3)\r\n                return;\r\n\r\n            let i, j, x0, x1, y, tx, temp;\r\n            // amount of scanline.\r\n            let scanLines, min, max;\r\n\r\n            //edge table.\r\n            let ET = {};\r\n            //active edge table.\r\n            let AET = [];\r\n            //table of intersection point.\r\n            let arr = [];\r\n            //begin point.\r\n            let p0;\r\n            //end point.\r\n            let p1;\r\n            // ptr of node.\r\n            let pNode;\r\n\r\n            min = points.minPointY();\r\n            max = points.maxPointY();\r\n            scanLines = max - min;\r\n\r\n            //Processing side by side, inserting the information of each edge into the ET.\r\n            for (let i = 0; i < points.size(); i++) {\r\n                if (i < points.size() - 1) {\r\n                    p0 = points.indexValue(i);\r\n                    p1 = points.indexValue(i + 1);\r\n                }\r\n                else {\r\n                    p0 = points.indexValue(i);\r\n                    p1 = points.indexValue(0);\r\n                }\r\n\r\n                if (p0.y > p1.y) {\r\n                    temp = p0;\r\n                    p0 = p1;\r\n                    p1 = temp;\r\n                }\r\n\r\n                if (p0.y != p1.y) {\r\n                    pNode = new Edge(p0.x, (p1.x - p0.x) / (p1.y - p0.y), (p1.y - 1));\r\n                    if (!ET[p0.y - min]) {\r\n                        ET[p0.y - min] = [];\r\n                    }\r\n\r\n                    ET[p0.y - min].push(pNode);\r\n                }\r\n\r\n            }\r\n\r\n            for (let i = 0; i < scanLines; i++) {\r\n\r\n                y = i + min;\r\n                if (ET[i]) {\r\n                    ET[i].forEach(element => {\r\n                        AET.push(element);\r\n                    });\r\n\r\n                }\r\n                ET[i] = null;\r\n\r\n                //Dealing with active edge table AET.\r\n                if (AET) {\r\n                    for (let i = 0; i < AET.length;) {\r\n                        if (AET[i].getYmax() < y) {\r\n                            AET.splice(i, 1);\r\n\r\n                        } else {\r\n                            i++;\r\n                        }\r\n                    }\r\n                }\r\n                //Activate the edge table is not empty, find the intersection, sort, draw a line.\r\n                if (AET) {\r\n\r\n                    AET.forEach(element => {\r\n                        arr.push(element.getX());\r\n                        element.setX(element.getX() + element.getDx());\r\n                    });\r\n\r\n                    arr.sort();\r\n\r\n                    for (j = 0; j < arr.length; j++) {\r\n                        if (j % 2 == 0) {\r\n                            tx = arr[j];\r\n                            if (arr[j] - tx)\r\n                                x0 = tx + 1;\r\n                            else\r\n                                x0 = tx;\r\n                            x1 = arr[j + 1];\r\n                        }\r\n\r\n                        uiSetting.drawLineInGrid(this, { x: x0, y: y }, { x: x1, y: y }, this.sectionParams.color);\r\n                    }\r\n                    arr = [];\r\n                }\r\n            }\r\n            ET = [];\r\n        },\r\n        SetUI() {\r\n            this.$refs.page.SetUI();\r\n        },\r\n\r\n\r\n    },\r\n    mounted() {\r\n        this.Init();\r\n        this.SetUI();\r\n    },\r\n\r\n\r\n};\r\n\r\n</script>\r\n","/*\r\n    @author:haruluya\r\n    @des:The obstraction of polygon\r\n    @params:{\r\n        points:the points of polygon.\r\n    }\r\n*/\r\nclass Polygon{\r\n    constructor(points){\r\n        this.points = points\r\n    }\r\n    maxPointX(){\r\n        let max = 0;\r\n        this.points.forEach(element => {\r\n            max = max > element.x ? max : element.x;\r\n        });\r\n        return max;\r\n    }\r\n    minPointX(){\r\n        let min = this.maxPointX();\r\n        this.points.forEach(element =>{\r\n            min = min < element.x ? min : element.x;\r\n        })\r\n        return min;\r\n    }\r\n    maxPointY(){\r\n        let max = 0;\r\n        this.points.forEach(element => {\r\n            max = max > element.y ? max : element.y;\r\n        });\r\n        return max;\r\n    }\r\n    minPointY(){\r\n        let min = this.maxPointX();\r\n        this.points.forEach(element =>{\r\n            min = min < element.y ? min : element.y;\r\n        })\r\n        return min;\r\n    }\r\n    size(){\r\n        return this.points.length;\r\n    }\r\n    indexValue(index){\r\n        return this.points[index];\r\n    }\r\n}\r\nexport default Polygon;","/*\r\n    @author:haruluya\r\n    @des:The obstraction of edge\r\n    @params:{\r\n        x:The starting x coordinate of the edge or the coordinate of the intersection of the edge and the scan line.\r\n        dx:Reciprocal of the slope of an edge.\r\n        ymax:The maximum y coordinate of the edge.\r\n    }\r\n*/\r\nclass Edge {\r\n    constructor(x, dx, ymax) {\r\n        this.x = x;\r\n        this.dx = dx;\r\n        this.ymax = ymax;\r\n    }\r\n    setX(x) {\r\n        this.x = x;\r\n    }\r\n    setDx(dx) {\r\n        this.dx = dx;\r\n    }\r\n    setYmax(ymax) {\r\n        this.ymax = ymax;\r\n    }\r\n    getX() {\r\n        return this.x;\r\n    }\r\n    getDx() {\r\n        return this.dx;\r\n    }\r\n    getYmax() {\r\n        return this.ymax;\r\n    }\r\n}\r\nexport default Edge;","import { render } from \"./index.vue?vue&type=template&id=093ad3d6&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createBlock","_component_nano_cg_experiment_page","prop_des_data","$data","prop_ui_setter","$options","prop_section_params","ref","Polygon","constructor","points","this","maxPointX","max","forEach","element","x","minPointX","min","maxPointY","y","minPointY","size","length","indexValue","index","Edge","dx","ymax","setX","setDx","setYmax","getX","getDx","getYmax","desData","category","name","buttonContent","title","content","data","canvas","ctx","sectionParams","color","debugContent","girdSize","computed","uiSetter","setter","type","id","value","callback","uiSetting","default","i","push","methods","Init","$refs","page","getCanvas","getContext","Render","gridx","parseInt","width","gridy","height","clearRect","fillStyle","j","x0","x1","tx","temp","scanLines","p0","p1","pNode","ET","AET","arr","splice","sort","SetUI","mounted","__exports__","render"],"sourceRoot":""}