{"version":3,"file":"js/834.1c4e28f5.js","mappings":"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","sources":["webpack://rock-sugar/./src/pages/Webgl/WebglDemo/ObjResolver/index.vue","webpack://rock-sugar/./src/pages/Webgl/WebglDemo/ObjResolver/index.vue?bb6a"],"sourcesContent":["<template lang=\"html\">\r\n    <body>\r\n        <div class=\"webglContainer\">\r\n            <div class=\"canvesContainer\">\r\n                <canvas id=\"canvas\">\r\n                </canvas>\r\n            </div>\r\n        </div>\r\n        <div class=\"desContainer\">\r\n            <div class=\"des\">\r\n                <div class=\"title\">\r\n                    <span id=\"category\">webgl</span>\r\n                    <span id=\"name\">ObjResolver</span>\r\n                </div>\r\n                <div class=\"codeLink\">\r\n                    <nano_button @handleClick=\"handleClick\"></nano_button>\r\n                </div>\r\n            </div>\r\n            <div class=\"conclusion\">\r\n                <span class=\"title\"><span id=\"conTitle\">模型渲染</span></span>\r\n                <span class=\"content\">I can't build a model of the future, let alone render it.</span>\r\n            </div>\r\n            <div class=\"menu\">\r\n                <nano_items_menu></nano_items_menu>\r\n            </div>\r\n        </div>\r\n    </body>\r\n</template>\r\n<script>\r\nexport default {\r\n    name:\"ObjResolver\",\r\n    mounted() {\r\n        this.Render();\r\n    },\r\n    methods: {\r\n        Render(){\r\n            \"use strict\";\r\n    function parseOBJ(text) {\r\n        // because indices are base 1 let's just fill in the 0th data\r\n        const objPositions = [[0, 0, 0]];\r\n        const objTexcoords = [[0, 0]];\r\n        const objNormals = [[0, 0, 0]];\r\n        const objColors = [[0, 0, 0]];\r\n\r\n        // same order as `f` indices\r\n        const objVertexData = [\r\n            objPositions,\r\n            objTexcoords,\r\n            objNormals,\r\n            objColors,\r\n        ];\r\n\r\n        // same order as `f` indices\r\n        let webglVertexData = [\r\n            [],   // positions\r\n            [],   // texcoords\r\n            [],   // normals\r\n            [],   // colors\r\n        ];\r\n\r\n        const materialLibs = [];\r\n        const geometries = [];\r\n        let geometry;\r\n        let groups = ['default'];\r\n        let material = 'default';\r\n        let object = 'default';\r\n\r\n        const noop = () => {};\r\n\r\n        function newGeometry() {\r\n            // If there is an existing geometry and it's\r\n            // not empty then start a new one.\r\n            if (geometry && geometry.data.position.length) {\r\n            geometry = undefined;\r\n            }\r\n        }\r\n\r\n        function setGeometry() {\r\n            if (!geometry) {\r\n            const position = [];\r\n            const texcoord = [];\r\n            const normal = [];\r\n            const color = [];\r\n            webglVertexData = [\r\n                position,\r\n                texcoord,\r\n                normal,\r\n                color,\r\n            ];\r\n            geometry = {\r\n                object,\r\n                groups,\r\n                material,\r\n                data: {\r\n                position,\r\n                texcoord,\r\n                normal,\r\n                color,\r\n                },\r\n            };\r\n            geometries.push(geometry);\r\n            }\r\n        }\r\n\r\n        function addVertex(vert) {\r\n            const ptn = vert.split('/');\r\n            ptn.forEach((objIndexStr, i) => {\r\n            if (!objIndexStr) {\r\n                return;\r\n            }\r\n            const objIndex = parseInt(objIndexStr);\r\n            const index = objIndex + (objIndex >= 0 ? 0 : objVertexData[i].length);\r\n            webglVertexData[i].push(...objVertexData[i][index]);\r\n            // if this is the position index (index 0) and we parsed\r\n            // vertex colors then copy the vertex colors to the webgl vertex color data\r\n            if (i === 0 && objColors.length > 1) {\r\n                geometry.data.color.push(...objColors[index]);\r\n            }\r\n            });\r\n        }\r\n\r\n        const keywords = {\r\n            v(parts) {\r\n            // if there are more than 3 values here they are vertex colors\r\n            if (parts.length > 3) {\r\n                objPositions.push(parts.slice(0, 3).map(parseFloat));\r\n                objColors.push(parts.slice(3).map(parseFloat));\r\n            } else {\r\n                objPositions.push(parts.map(parseFloat));\r\n            }\r\n            },\r\n            vn(parts) {\r\n            objNormals.push(parts.map(parseFloat));\r\n            },\r\n            vt(parts) {\r\n            // should check for missing v and extra w?\r\n            objTexcoords.push(parts.map(parseFloat));\r\n            },\r\n            f(parts) {\r\n            setGeometry();\r\n            const numTriangles = parts.length - 2;\r\n            for (let tri = 0; tri < numTriangles; ++tri) {\r\n                addVertex(parts[0]);\r\n                addVertex(parts[tri + 1]);\r\n                addVertex(parts[tri + 2]);\r\n            }\r\n            },\r\n            s: noop,    // smoothing group\r\n            mtllib(parts, unparsedArgs) {\r\n            // the spec says there can be multiple filenames here\r\n            // but many exist with spaces in a single filename\r\n            materialLibs.push(unparsedArgs);\r\n            },\r\n            usemtl(parts, unparsedArgs) {\r\n            material = unparsedArgs;\r\n            newGeometry();\r\n            },\r\n            g(parts) {\r\n            groups = parts;\r\n            newGeometry();\r\n            },\r\n            o(parts, unparsedArgs) {\r\n            object = unparsedArgs;\r\n            newGeometry();\r\n            },\r\n        };\r\n\r\n        const keywordRE = /(\\w*)(?: )*(.*)/;\r\n        const lines = text.split('\\n');\r\n        for (let lineNo = 0; lineNo < lines.length; ++lineNo) {\r\n            const line = lines[lineNo].trim();\r\n            if (line === '' || line.startsWith('#')) {\r\n            continue;\r\n            }\r\n            const m = keywordRE.exec(line);\r\n            if (!m) {\r\n            continue;\r\n            }\r\n            const [, keyword, unparsedArgs] = m;\r\n            const parts = line.split(/\\s+/).slice(1);\r\n            const handler = keywords[keyword];\r\n            if (!handler) {\r\n            console.warn('unhandled keyword:', keyword);  // eslint-disable-line no-console\r\n            continue;\r\n            }\r\n            handler(parts, unparsedArgs);\r\n        }\r\n\r\n        // remove any arrays that have no entries.\r\n        for (const geometry of geometries) {\r\n            geometry.data = Object.fromEntries(\r\n                Object.entries(geometry.data).filter(([, array]) => array.length > 0));\r\n        }\r\n\r\n        return {\r\n            geometries,\r\n            materialLibs,\r\n        };\r\n        }\r\n            \r\n        async function main() {\r\n    // Get A WebGL context\r\n    /** @type {HTMLCanvasElement} */\r\n    const canvas = document.querySelector(\"#canvas\");\r\n    const gl = canvas.getContext(\"webgl\");\r\n    if (!gl) {\r\n        return;\r\n    }\r\n\r\n    const vs = `\r\n    attribute vec4 a_position;\r\n    attribute vec3 a_normal;\r\n    attribute vec4 a_color;\r\n\r\n    uniform mat4 u_projection;\r\n    uniform mat4 u_view;\r\n    uniform mat4 u_world;\r\n\r\n    varying vec3 v_normal;\r\n    varying vec4 v_color;\r\n\r\n    void main() {\r\n        gl_Position = u_projection * u_view * u_world * a_position;\r\n        v_normal = mat3(u_world) * a_normal;\r\n        v_color = a_color;\r\n    }\r\n    `;\r\n\r\n    const fs = `\r\n    precision mediump float;\r\n\r\n    varying vec3 v_normal;\r\n    varying vec4 v_color;\r\n\r\n    uniform vec4 u_diffuse;\r\n    uniform vec3 u_lightDirection;\r\n\r\n    void main () {\r\n        vec3 normal = normalize(v_normal);\r\n        float fakeLight = dot(u_lightDirection, normal) * .5 + .5;\r\n        vec4 diffuse = u_diffuse * v_color;\r\n        gl_FragColor = vec4(diffuse.rgb * fakeLight, diffuse.a);\r\n    }\r\n    `;\r\n\r\n\r\n    // compiles and links the shaders, looks up attribute and uniform locations\r\n    const meshProgramInfo = haruluya_webgl_utils.createProgramInfo(gl, [vs, fs]);\r\n\r\n    const response = await fetch('https://webglfundamentals.org/webgl/resources/models/book-vertex-chameleon-study/book.obj');  \r\n    const text = await response.text();\r\n    const obj = parseOBJ(text);\r\n\r\n    const parts = obj.geometries.map(({data}) => {\r\n        // Because data is just named arrays like this\r\n        //\r\n        // {\r\n        //   position: [...],\r\n        //   texcoord: [...],\r\n        //   normal: [...],\r\n        // }\r\n        //\r\n        // and because those names match the attributes in our vertex\r\n        // shader we can pass it directly into `createBufferInfoFromArrays`\r\n        // from the article \"less code more fun\".\r\n\r\n        if (data.color) {\r\n        if (data.position.length === data.color.length) {\r\n            // it's 3. The our helper library assumes 4 so we need\r\n            // to tell it there are only 3.\r\n            data.color = { numComponents: 3, data: data.color };\r\n        }\r\n        } else {\r\n        // there are no vertex colors so just use constant white\r\n        data.color = { value: [1, 1, 1, 1] };\r\n        }\r\n\r\n        // create a buffer for each array by calling\r\n        // gl.createBuffer, gl.bindBuffer, gl.bufferData\r\n        const bufferInfo = haruluya_webgl_utils.createBufferInfoFromArrays(gl, data);\r\n        return {\r\n        material: {\r\n            u_diffuse: [1, 1, 1, 1],\r\n        },\r\n        bufferInfo,\r\n        };\r\n    });\r\n\r\n    function getExtents(positions) {\r\n        const min = positions.slice(0, 3);\r\n        const max = positions.slice(0, 3);\r\n        for (let i = 3; i < positions.length; i += 3) {\r\n        for (let j = 0; j < 3; ++j) {\r\n            const v = positions[i + j];\r\n            min[j] = Math.min(v, min[j]);\r\n            max[j] = Math.max(v, max[j]);\r\n        }\r\n        }\r\n        return {min, max};\r\n    }\r\n\r\n    function getGeometriesExtents(geometries) {\r\n        return geometries.reduce(({min, max}, {data}) => {\r\n        const minMax = getExtents(data.position);\r\n        return {\r\n            min: min.map((min, ndx) => Math.min(minMax.min[ndx], min)),\r\n            max: max.map((max, ndx) => Math.max(minMax.max[ndx], max)),\r\n        };\r\n        }, {\r\n        min: Array(3).fill(Number.POSITIVE_INFINITY),\r\n        max: Array(3).fill(Number.NEGATIVE_INFINITY),\r\n        });\r\n    }\r\n\r\n    const extents = getGeometriesExtents(obj.geometries);\r\n    const range = haruluya_webgl_utils.subtractVectors(extents.max, extents.min);\r\n    // amount to move the object so its center is at the origin\r\n    const objOffset = haruluya_webgl_utils.scaleVector(\r\n        haruluya_webgl_utils.addVectors(\r\n            extents.min,\r\n            haruluya_webgl_utils.scaleVector(range, 0.5)),\r\n        -1);\r\n    const cameraTarget = [0, 0, 0];\r\n    // figure out how far away to move the camera so we can likely\r\n    // see the object.\r\n    const radius = haruluya_webgl_utils.length(range) * 1.2;\r\n    const cameraPosition = haruluya_webgl_utils.addVectors(cameraTarget, [\r\n        0,\r\n        0,\r\n        radius,\r\n    ]);\r\n    // Set zNear and zFar to something hopefully appropriate\r\n    // for the size of this object.\r\n    const zNear = radius / 100;\r\n    const zFar = radius * 3;\r\n\r\n    function degToRad(deg) {\r\n        return deg * Math.PI / 180;\r\n    }\r\n\r\n    function render(time) {\r\n        time *= 0.001;  // convert to seconds\r\n\r\n        haruluya_webgl_utils.resizeCanvasToDisplaySize(gl.canvas);\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        const fieldOfViewRadians = degToRad(60);\r\n        const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n        const projection = haruluya_webgl_utils.perspective(fieldOfViewRadians, aspect, zNear, zFar);\r\n\r\n        const up = [0, 1, 0];\r\n        // Compute the camera's matrix using look at.\r\n        const camera = haruluya_webgl_utils.lookAt(cameraPosition, cameraTarget, up);\r\n\r\n        // Make a view matrix from the camera matrix.\r\n        const view = haruluya_webgl_utils.inverse(camera);\r\n\r\n        const sharedUniforms = {\r\n        u_lightDirection: haruluya_webgl_utils.normalize([-1, 3, 5]),\r\n        u_view: view,\r\n        u_projection: projection,\r\n        };\r\n\r\n        gl.useProgram(meshProgramInfo.program);\r\n\r\n        // calls gl.uniform\r\n        haruluya_webgl_utils.setUniforms(meshProgramInfo, sharedUniforms);\r\n\r\n        // compute the world matrix once since all parts\r\n        // are at the same space.\r\n        let u_world = haruluya_webgl_utils.yRotation(time);\r\n        u_world = haruluya_webgl_utils.translate3d(u_world, ...objOffset);\r\n\r\n        for (const {bufferInfo, material} of parts) {\r\n        // calls gl.bindBuffer, gl.enableVertexAttribArray, gl.vertexAttribPointer\r\n        haruluya_webgl_utils.setBuffersAndAttributes(gl, meshProgramInfo, bufferInfo);\r\n        // calls gl.uniform\r\n        haruluya_webgl_utils.setUniforms(meshProgramInfo, {\r\n            u_world,\r\n            u_diffuse: material.u_diffuse,\r\n        });\r\n        // calls gl.drawArrays or gl.drawElements\r\n        haruluya_webgl_utils.drawBufferInfo(gl, bufferInfo);\r\n        }\r\n\r\n        requestAnimationFrame(render);\r\n    }\r\n    requestAnimationFrame(render);\r\n    }\r\n    main();\r\n        }\r\n    },\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n@import \"../index.less\";\r\n</style>","import { render } from \"./index.vue?vue&type=template&id=77810a46&scoped=true&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=77810a46&lang=less&scoped=true\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-77810a46\"]])\n\nexport default __exports__"],"names":["_createElementVNode","class","id","_createElementBlock","_hoisted_1","_hoisted_4","_createVNode","_component_nano_button","onHandleClick","_ctx","_hoisted_6","_component_nano_items_menu","name","mounted","this","Render","methods","parseOBJ","text","objPositions","objTexcoords","objNormals","objColors","objVertexData","webglVertexData","materialLibs","geometries","geometry","groups","material","object","noop","newGeometry","data","position","length","undefined","setGeometry","texcoord","normal","color","push","addVertex","vert","ptn","split","forEach","objIndexStr","i","objIndex","parseInt","index","keywords","v","parts","slice","map","parseFloat","vn","vt","f","numTriangles","tri","s","mtllib","unparsedArgs","usemtl","g","o","keywordRE","lines","lineNo","line","trim","startsWith","m","exec","keyword","handler","console","warn","Object","fromEntries","entries","filter","array","async","main","canvas","document","querySelector","gl","getContext","vs","fs","meshProgramInfo","haruluya_webgl_utils","createProgramInfo","response","fetch","obj","numComponents","value","bufferInfo","createBufferInfoFromArrays","u_diffuse","getExtents","positions","min","max","j","Math","getGeometriesExtents","reduce","minMax","ndx","Array","fill","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","extents","range","subtractVectors","objOffset","scaleVector","addVectors","cameraTarget","radius","cameraPosition","zNear","zFar","degToRad","deg","PI","render","time","resizeCanvasToDisplaySize","viewport","width","height","enable","DEPTH_TEST","fieldOfViewRadians","aspect","clientWidth","clientHeight","projection","perspective","up","camera","lookAt","view","inverse","sharedUniforms","u_lightDirection","normalize","u_view","u_projection","useProgram","program","setUniforms","u_world","yRotation","translate3d","setBuffersAndAttributes","drawBufferInfo","requestAnimationFrame","__exports__"],"sourceRoot":""}