{"version":3,"file":"js/173.e3be294c.js","mappings":"kQACIA,EAAAA,EAAAA,IAUEC,EAAA,CATGC,cAAeC,EAAAA,QACfC,eAAgBD,EAAAA,SAChBE,mBAAoBF,EAAAA,mBACpBG,qBAAsBH,EAAAA,qBACtBI,oBAAqBJ,EAAAA,cACtBK,IAAI,OACHC,OAAMC,EAAAA,KACNC,SAAQD,EAAAA,OACRE,iBAAgBT,EAAAA,UATrB,mJ,aCDJ,EACC,2RCDD,EACC,+S,OFmBD,MAAMU,EAAU,CACZC,SAAS,QACTC,KAAK,cACLC,cAAc,OACdC,MAAM,OACNC,QAAQ,mBAGZ,OACIH,KAAK,cACLI,OACI,MAAO,CACHC,GAAI,KACJC,OAAQ,KACRC,QAAS,KACTC,mBAJG,EAKHC,qBALG,EAMHX,UACAY,YAAY,CACRC,OAAO,EACPC,mBAAqBC,WAAWC,SAAS,IACzCC,MAAO,EACPC,KAAM,KAEVC,UAAU,CACNC,YAAY,CAAC,EAAG,EAAG,GACnBC,SAAS,CAACN,WAAWC,SAAS,GAAID,WAAWC,SAAS,GAAID,WAAWC,SAAS,IAC9EM,MAAM,CAAC,EAAE,EAAE,IAEfC,OAAO,CACHC,OAAO,CAAC,EAAG,EAAG,GACdC,SAAS,CAAC,EAAG,EAAG,GAChBC,GAAG,CAAC,EAAE,EAAE,IAEZC,cAAc,CAAC,EAGfC,KAAK,KACLC,SAAS,GACTC,WAAW,KAElB,EACDC,UACIC,KAAKC,eACR,EACDC,QAAS,CACLC,OACI,IAAIH,KAAKF,WACL,OAEJE,KAAKJ,KAAOI,KAAKI,MAAMR,KACvBI,KAAKzB,GAAKyB,KAAKJ,KAAKS,QACpBL,KAAKxB,OAASwB,KAAKJ,KAAKU,YACxBN,KAAKvB,QAAUuB,KAAKJ,KAAKW,aAGzBP,KAAKpB,YAAYC,OAASmB,KAAKzB,GAAGC,OAAOgC,YAAcR,KAAKzB,GAAGC,OAAOiC,aAEtET,KAAKJ,KAAKc,aAAaV,KAAKb,WAE5B,MAAMb,EAAO0B,KAAKW,YAAYX,KAAKF,YACnCc,QAAQC,IAAIvC,EAAK,QACjBA,EAAKwC,WAAWC,KAAI,EAAEzC,WAClB0B,KAAKJ,KAAKoB,UAAU,WAAW,CAAC1C,KAAKA,EAAKmB,WAC1CO,KAAKJ,KAAKoB,UAAU,WAAW,CAACC,cAAc,EAAE3C,KAAKA,EAAK4C,WAC1DlB,KAAKJ,KAAKoB,UAAU,SAAS,CAAC1C,KAAKA,EAAK6C,QAAxC,GAEP,EACDC,SACI,IAAIpB,KAAKF,WACL,OAEJ,MAAMvB,EAAKyB,KAAKzB,GAEhBA,EAAG8C,OAAO9C,EAAG+C,YACb/C,EAAG8C,OAAO9C,EAAGgD,WAEb,IAAIC,EAAmBzC,WAAWH,YAC9BoB,KAAKpB,YAAYE,mBACjBkB,KAAKpB,YAAYC,OACjBmB,KAAKpB,YAAYK,MACjBe,KAAKpB,YAAYM,MAEjBuC,EAAe1C,WAAW2C,OAAO1B,KAAKT,OAAOE,SAAUO,KAAKT,OAAOC,OAAQQ,KAAKT,OAAOG,IACvFiC,EAAa5C,WAAW6C,QAAQH,GAEhCI,EAAc9C,WAAW+C,mBACrB/C,WAAWgD,UAAU,GAAG/B,KAAKb,WACrCa,KAAKJ,KAAKoC,WAAW,SAASL,GAC9B3B,KAAKJ,KAAKoC,WAAW,mBAAmBjD,WAAWkD,UAAU,EAAE,EAAE,EAAE,KACnEjC,KAAKJ,KAAKoC,WAAW,eAAeR,GAEpCxB,KAAKJ,KAAKoC,WAAW,YAAY,CAAC,EAAG,EAAG,EAAG,IAC3ChC,KAAKJ,KAAKoC,WAAW,UAAUH,EAClC,EACDK,sBACI,MAAMC,QAAkBC,MAAM,wEACxBC,QAAaF,EAASE,OAC5BrC,KAAKF,WAAauC,EAClBrC,KAAKI,MAAMR,KAAKO,MACnB,EACDQ,YAAY0B,GAER,MAAMC,EAAe,CAAC,CAAC,EAAG,EAAG,IACvBC,EAAe,CAAC,CAAC,EAAG,IACpBC,EAAa,CAAC,CAAC,EAAG,EAAG,IAGrBC,EAAgB,CAClBH,EACAC,EACAC,GAIJ,IAAIE,EAAkB,CAClB,GACA,GACA,IAGJ,MAAMC,EAAe,GACf7B,EAAa,GACnB,IAAI8B,EACAC,EAAS,CAAC,WACVC,EAAW,UACXC,EAAS,UAEb,MAAMC,EAAO,OAEb,SAASC,IAGDL,GAAYA,EAAStE,KAAKmB,SAASyD,SACvCN,OAAWO,EAEf,CAEA,SAASC,IACL,IAAKR,EAAU,CACf,MAAMnD,EAAW,GACXyB,EAAW,GACXC,EAAS,GACfuB,EAAkB,CACdjD,EACAyB,EACAC,GAEJyB,EAAW,CACPG,SACAF,SACAC,WACAxE,KAAM,CACNmB,WACAyB,WACAC,WAGJL,EAAWuC,KAAKT,EAChB,CACJ,CAEA,SAASU,EAAUC,GACf,MAAMC,EAAMD,EAAKE,MAAM,KACvBD,EAAIE,SAAQ,CAACC,EAAaC,KAC1B,IAAKD,EACD,OAEJ,MAAME,EAAWC,SAASH,GACpBI,EAAQF,GAAYA,GAAY,EAAI,EAAIpB,EAAcmB,GAAGV,QAC/DR,EAAgBkB,GAAGP,QAAQZ,EAAcmB,GAAGG,GAA5C,GAEJ,CAEA,MAAMC,EAAW,CACbC,EAAEC,GACF5B,EAAae,KAAKa,EAAMnD,IAAIoD,YAC3B,EACDC,GAAGF,GACH1B,EAAWa,KAAKa,EAAMnD,IAAIoD,YACzB,EACDE,GAAGH,GAEH3B,EAAac,KAAKa,EAAMnD,IAAIoD,YAC3B,EACDG,EAAEJ,GACEd,IACA,MAAMmB,EAAeL,EAAMhB,OAAS,EACpC,IAAK,IAAIsB,EAAM,EAAGA,EAAMD,IAAgBC,EACpClB,EAAUY,EAAM,IAChBZ,EAAUY,EAAMM,EAAM,IACtBlB,EAAUY,EAAMM,EAAM,GAE7B,EACDC,EAAGzB,EACH0B,OAAOR,EAAOS,GAGVhC,EAAaU,KAAKsB,EACrB,EACDC,OAAOV,EAAOS,GACV7B,EAAW6B,EACX1B,GACH,EACD4B,EAAEX,GACErB,EAASqB,EACTjB,GACH,EACD6B,EAAEZ,EAAOS,GACL5B,EAAS4B,EACT1B,GACH,GAGC8B,EAAY,kBACZC,EAAQ3C,EAAKoB,MAAM,MACzB,IAAK,IAAIwB,EAAS,EAAGA,EAASD,EAAM9B,SAAU+B,EAAQ,CAClD,MAAMC,EAAOF,EAAMC,GAAQE,OAC3B,GAAa,KAATD,GAAeA,EAAKE,WAAW,KAC/B,SAEJ,MAAMC,EAAIN,EAAUO,KAAKJ,GACzB,IAAKG,EACD,SAEJ,MAAO,CAAEE,EAASZ,GAAgBU,EAC5BnB,EAAQgB,EAAKzB,MAAM,OAAO+B,MAAM,GAChCC,EAAUzB,EAASuB,GACpBE,EAILA,EAAQvB,EAAOS,GAHX/D,QAAQ8E,KAAK,qBAAsBH,EAI3C,CAGA,IAAK,MAAM3C,KAAY9B,EACnB8B,EAAStE,KAAOqH,OAAOC,YACnBD,OAAOE,QAAQjD,EAAStE,MAAMwH,QAAO,EAAE,CAAEC,KAAWA,EAAM7C,OAAS,KAG3E,MAAO,CACHpC,aACA6B,eAEP,I,QGpQT,MAAMqD,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://rock-sugar/./src/pages/Webgl/WebglDemo/ObjResolver/index.vue","webpack://rock-sugar/./src/pages/Webgl/WebglDemo/ObjResolver/resource/vertex-shader.js","webpack://rock-sugar/./src/pages/Webgl/WebglDemo/ObjResolver/resource/fragment-shader.js","webpack://rock-sugar/./src/pages/Webgl/WebglDemo/ObjResolver/index.vue?bb6a"],"sourcesContent":["<template lang=\"html\">\r\n    <nano_webgl_demo_panel\r\n        :prop_des_data=\"desData\"\r\n        :prop_ui_setter=\"uiSetter\"\r\n        :prop_vertex_shader=\"vertexShaderSource\"\r\n        :prop_fragment_shader=\"fragmentShaderSource\"\r\n        :prop_section_params=\"sectionParams\"\r\n        ref=\"page\"\r\n        @Init=\"Init\"\r\n        @Render=\"Render\"\r\n        @prop_ui_setter=\"uiSetter\"\r\n    />\r\n</template>\r\n<script>\r\nimport vertexShaderSource from './resource/vertex-shader.js'\r\nimport fragmentShaderSource from './resource/fragment-shader.js'\r\n\r\n\r\nimport uiSetting from \"../ui-setting\"\r\n\r\nconst desData = {\r\n    category:\"Webgl\",\r\n    name:\"ObjResolver\",\r\n    buttonContent:\"查看源码\",\r\n    title:\"模型解析\",\r\n    content:\"Model analysis.\"\r\n}\r\n\r\nexport default {\r\n    name:\"ObjResolver\",\r\n    data() {\r\n        return {\r\n            gl: null,\r\n            canvas: null,\r\n            program: null,\r\n            vertexShaderSource,\r\n            fragmentShaderSource,\r\n            desData,\r\n            perspective:{\r\n                aspect:0,\r\n                fieldOfViewRadians:  HNWUEngine.degToRad(60),\r\n                zNear: 1,\r\n                zFar: 1000,\r\n            },\r\n            transform:{\r\n                translation:[0, 0, 0],\r\n                rotation:[HNWUEngine.degToRad(0), HNWUEngine.degToRad(0), HNWUEngine.degToRad(0)],\r\n                scale:[1,1,1]\r\n            },\r\n            camera:{\r\n                target:[0, 0, 0],\r\n                position:[0, 0, 3],\r\n                up:[0,1,0]\r\n            },\r\n            sectionParams:{\r\n                \r\n            },\r\n            page:null,\r\n            uiSetter:[],\r\n            objectData:null\r\n        }\r\n    },\r\n    mounted(){\r\n        this.getObjectData();\r\n    },\r\n    methods: {\r\n        Init(){\r\n            if(!this.objectData){\r\n                return;\r\n            }\r\n            this.page = this.$refs.page;\r\n            this.gl = this.page.getGL();\r\n            this.canvas = this.page.getCanvas();\r\n            this.program = this.page.getProgram();\r\n\r\n            //Get bufferinfo and setters.\r\n            this.perspective.aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\r\n\r\n            this.page.setTransform(this.transform);\r\n\r\n            const data = this.objectParse(this.objectData);\r\n            console.log(data,\"data\")\r\n            data.geometries.map(({data}) => {\r\n                this.page.addBuffer(\"position\",{data:data.position});\r\n                this.page.addBuffer(\"texcoord\",{numComponents:2,data:data.texcoord});\r\n                this.page.addBuffer(\"normal\",{data:data.normal});\r\n            });\r\n        },\r\n        Render(){\r\n            if(!this.objectData){\r\n                return;\r\n            }\r\n            const gl = this.gl;\r\n\r\n            gl.enable(gl.DEPTH_TEST);\r\n            gl.enable(gl.CULL_FACE);\r\n\r\n            let projectionMatrix = HNWUEngine.perspective(\r\n                this.perspective.fieldOfViewRadians, \r\n                this.perspective.aspect, \r\n                this.perspective.zNear, \r\n                this.perspective.zFar\r\n                );\r\n            let cameraMatrix = HNWUEngine.lookAt(this.camera.position, this.camera.target, this.camera.up);\r\n            let viewMatrix = HNWUEngine.inverse(cameraMatrix);\r\n\r\n            let worldMatrix = HNWUEngine.getTransformMatrix(\r\n                    HNWUEngine.yRotation(0),this.transform);\r\n            this.page.addUniform(\"u_view\",viewMatrix);\r\n            this.page.addUniform(\"u_lightDirection\",HNWUEngine.normalize([-1,3,5]));\r\n            this.page.addUniform(\"u_projection\",projectionMatrix);\r\n\r\n            this.page.addUniform(\"u_diffuse\",[1, 1, 1, 1]);\r\n            this.page.addUniform(\"u_world\",worldMatrix);\r\n        },\r\n        async getObjectData(){\r\n            const response =  await fetch('https://webglfundamentals.org/webgl/resources/models/chair/chair.obj');  \r\n            const text = await response.text();\r\n            this.objectData = text;\r\n            this.$refs.page.Init();\r\n        },\r\n        objectParse(text) {\r\n            // because indices are base 1 let's just fill in the 0th data\r\n            const objPositions = [[0, 0, 0]];\r\n            const objTexcoords = [[0, 0]];\r\n            const objNormals = [[0, 0, 0]];\r\n\r\n            // same order as `f` indices\r\n            const objVertexData = [\r\n                objPositions,\r\n                objTexcoords,\r\n                objNormals,\r\n            ];\r\n\r\n            // same order as `f` indices\r\n            let webglVertexData = [\r\n                [],   // positions\r\n                [],   // texcoords\r\n                [],   // normals\r\n            ];\r\n\r\n            const materialLibs = [];\r\n            const geometries = [];\r\n            let geometry;\r\n            let groups = ['default'];\r\n            let material = 'default';\r\n            let object = 'default';\r\n\r\n            const noop = () => {};\r\n\r\n            function newGeometry() {\r\n                // If there is an existing geometry and it's\r\n                // not empty then start a new one.\r\n                if (geometry && geometry.data.position.length) {\r\n                geometry = undefined;\r\n                }\r\n            }\r\n\r\n            function setGeometry() {\r\n                if (!geometry) {\r\n                const position = [];\r\n                const texcoord = [];\r\n                const normal = [];\r\n                webglVertexData = [\r\n                    position,\r\n                    texcoord,\r\n                    normal,\r\n                ];\r\n                geometry = {\r\n                    object,\r\n                    groups,\r\n                    material,\r\n                    data: {\r\n                    position,\r\n                    texcoord,\r\n                    normal,\r\n                    },\r\n                };\r\n                geometries.push(geometry);\r\n                }\r\n            }\r\n\r\n            function addVertex(vert) {\r\n                const ptn = vert.split('/');\r\n                ptn.forEach((objIndexStr, i) => {\r\n                if (!objIndexStr) {\r\n                    return;\r\n                }\r\n                const objIndex = parseInt(objIndexStr);\r\n                const index = objIndex + (objIndex >= 0 ? 0 : objVertexData[i].length);\r\n                webglVertexData[i].push(...objVertexData[i][index]);\r\n                });\r\n            }\r\n\r\n            const keywords = {\r\n                v(parts) {\r\n                objPositions.push(parts.map(parseFloat));\r\n                },\r\n                vn(parts) {\r\n                objNormals.push(parts.map(parseFloat));\r\n                },\r\n                vt(parts) {\r\n                // should check for missing v and extra w?\r\n                objTexcoords.push(parts.map(parseFloat));\r\n                },\r\n                f(parts) {\r\n                    setGeometry();\r\n                    const numTriangles = parts.length - 2;\r\n                    for (let tri = 0; tri < numTriangles; ++tri) {\r\n                        addVertex(parts[0]);\r\n                        addVertex(parts[tri + 1]);\r\n                        addVertex(parts[tri + 2]);\r\n                    }\r\n                },\r\n                s: noop,    // smoothing group\r\n                mtllib(parts, unparsedArgs) {\r\n                    // the spec says there can be multiple filenames here\r\n                    // but many exist with spaces in a single filename\r\n                    materialLibs.push(unparsedArgs);\r\n                },\r\n                usemtl(parts, unparsedArgs) {\r\n                    material = unparsedArgs;\r\n                    newGeometry();\r\n                },\r\n                g(parts) {\r\n                    groups = parts;\r\n                    newGeometry();\r\n                },\r\n                o(parts, unparsedArgs) {\r\n                    object = unparsedArgs;\r\n                    newGeometry();\r\n                },\r\n            };\r\n\r\n            const keywordRE = /(\\w*)(?: )*(.*)/;\r\n            const lines = text.split('\\n');\r\n            for (let lineNo = 0; lineNo < lines.length; ++lineNo) {\r\n                const line = lines[lineNo].trim();\r\n                if (line === '' || line.startsWith('#')) {\r\n                    continue;\r\n                }\r\n                const m = keywordRE.exec(line);\r\n                if (!m) {\r\n                    continue;\r\n                }\r\n                const [, keyword, unparsedArgs] = m;\r\n                const parts = line.split(/\\s+/).slice(1);\r\n                const handler = keywords[keyword];\r\n                if (!handler) {\r\n                    console.warn('unhandled keyword:', keyword);  // eslint-disable-line no-console\r\n                    continue;\r\n                }\r\n                handler(parts, unparsedArgs);\r\n            }\r\n\r\n            // remove any arrays that have no entries.\r\n            for (const geometry of geometries) {\r\n                geometry.data = Object.fromEntries(\r\n                    Object.entries(geometry.data).filter(([, array]) => array.length > 0));\r\n            }\r\n\r\n            return {\r\n                geometries,\r\n                materialLibs,\r\n            };\r\n        },\r\n\r\n    }\r\n}\r\n</script>\r\n","export default\r\n`\r\nattribute vec4 a_position;\r\nattribute vec3 a_normal;\r\n\r\nuniform mat4 u_projection;\r\nuniform mat4 u_view;\r\nuniform mat4 u_world;\r\n\r\nvarying vec3 v_normal;\r\n\r\nvoid main() {\r\n  gl_Position = u_projection * u_view * u_world * a_position;\r\n  v_normal = mat3(u_world) * a_normal;\r\n}\r\n`","export default\r\n`\r\nprecision mediump float;\r\n\r\nvarying vec3 v_normal;\r\n\r\nuniform vec4 u_diffuse;\r\nuniform vec3 u_lightDirection;\r\n\r\nvoid main () {\r\n  vec3 normal = normalize(v_normal);\r\n  float fakeLight = dot(u_lightDirection, normal) * .5 + .5;\r\n  gl_FragColor = vec4(u_diffuse.rgb * fakeLight, u_diffuse.a);\r\n}\r\n\r\n`","import { render } from \"./index.vue?vue&type=template&id=19edd4ea&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createBlock","_component_nano_webgl_demo_panel","prop_des_data","$data","prop_ui_setter","prop_vertex_shader","prop_fragment_shader","prop_section_params","ref","onInit","$options","onRender","onProp_ui_setter","desData","category","name","buttonContent","title","content","data","gl","canvas","program","vertexShaderSource","fragmentShaderSource","perspective","aspect","fieldOfViewRadians","HNWUEngine","degToRad","zNear","zFar","transform","translation","rotation","scale","camera","target","position","up","sectionParams","page","uiSetter","objectData","mounted","this","getObjectData","methods","Init","$refs","getGL","getCanvas","getProgram","clientWidth","clientHeight","setTransform","objectParse","console","log","geometries","map","addBuffer","numComponents","texcoord","normal","Render","enable","DEPTH_TEST","CULL_FACE","projectionMatrix","cameraMatrix","lookAt","viewMatrix","inverse","worldMatrix","getTransformMatrix","yRotation","addUniform","normalize","async","response","fetch","text","objPositions","objTexcoords","objNormals","objVertexData","webglVertexData","materialLibs","geometry","groups","material","object","noop","newGeometry","length","undefined","setGeometry","push","addVertex","vert","ptn","split","forEach","objIndexStr","i","objIndex","parseInt","index","keywords","v","parts","parseFloat","vn","vt","f","numTriangles","tri","s","mtllib","unparsedArgs","usemtl","g","o","keywordRE","lines","lineNo","line","trim","startsWith","m","exec","keyword","slice","handler","warn","Object","fromEntries","entries","filter","array","__exports__","render"],"sourceRoot":""}