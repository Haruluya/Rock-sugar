{"version":3,"file":"js/127.ec2d52d7.js","mappings":"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","sources":["webpack://rock-sugar/./src/pages/CG/Experiment/Interfaces/Polygon.js","webpack://rock-sugar/./src/pages/CG/Experiment/EdgeTablePolygon/index.vue","webpack://rock-sugar/./src/pages/CG/Experiment/Interfaces/Edge.js","webpack://rock-sugar/./src/pages/CG/Experiment/EdgeTablePolygon/index.vue?124c"],"sourcesContent":["/*\r\n    @author:haruluya\r\n    @des:The obstraction of polygon\r\n    @params:{\r\n        points:the points of polygon.\r\n    }\r\n*/\r\nclass Polygon{\r\n    constructor(points){\r\n        this.points = points\r\n        this.points.forEach((e,i)=>{\r\n            this[i] = e;\r\n        })\r\n    }\r\n    maxPointX(){\r\n        let max = 0;\r\n        this.points.forEach(element => {\r\n            max = max > element.x ? max : element.x;\r\n        });\r\n        return max;\r\n    }\r\n    minPointX(){\r\n        let min = this.maxPointX();\r\n        this.points.forEach(element =>{\r\n            min = min < element.x ? min : element.x;\r\n        })\r\n        return min;\r\n    }\r\n    maxPointY(){\r\n        let max = 0;\r\n        this.points.forEach(element => {\r\n            max = max > element.y ? max : element.y;\r\n        });\r\n        return max;\r\n    }\r\n    minPointY(){\r\n        let min = this.maxPointX();\r\n        this.points.forEach(element =>{\r\n            min = min < element.y ? min : element.y;\r\n        })\r\n        return min;\r\n    }\r\n    size(){\r\n        return this.points.length;\r\n    }\r\n    indexValue(index){\r\n        return this.points[index];\r\n    }\r\n    isInPolygon(point){\r\n        let i, j;\r\n        let c = false;\r\n        for (i=0, j=this.size()-1; i<this.size(); j=i++)\r\n        {\r\n            if(((this.points[i].y>point.y) != (this.points[j].y>point.y)) &&\r\n                (point.x<(this.points[j].x-this.points[i].x) *\r\n                (point.y-this.points[i].y) / (this.points[j].y-this.points[i].y) + this.points[i].x))\r\n            c = !c;\r\n        }\r\n        return c;\r\n    }\r\n}\r\nexport default Polygon;","<template lang=\"html\">\r\n    <nano_cg_experiment_page :prop_des_data=\"desData\" :prop_ui_setter=\"uiSetter\" :prop_section_params=\"sectionParams\"\r\n        ref=\"page\" />\r\n</template>\r\n<script>\r\n\r\n\r\n\r\nimport uiSetting from \"../ui-setting\"\r\nimport { Edge, Polygon } from \"../Interfaces\"\r\n\r\n\r\nconst desData = {\r\n    category: \"Experiment\",\r\n    name: \"EdgeTablePolygon\",\r\n    buttonContent: \"查看源码\",\r\n    title: \"多边形有序边表\",\r\n    content: \"Edge table polygon.\"\r\n}\r\n\r\n\r\n/*\r\n    @author:haruluya\r\n    @des: Ex07 EdgeTablePolygon.\r\n*/\r\n\r\nexport default {\r\n    name: \"EdgeTablePolygon\",\r\n    data() {\r\n        return {\r\n            canvas: null,\r\n            ctx: null,\r\n            // component data.\r\n            desData,\r\n            // params of page.\r\n            sectionParams: {\r\n                points: [{ x: 20, y: 20 }, { x: 20, y: 70 }, { x: 50, y: 50 }, { x: 110, y: 60 }, { x: 110, y: 30 }, { x: 50, y: 10 }],\r\n                // points:[{x:125,y:125},{x:250,y:43},{x:0,y:43}],\r\n                color:'#0bc6e3',\r\n                debugContent: null,\r\n                girdSize: 3,\r\n                screenTransform:{x:0,y:0,scale:100}\r\n            }\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        //uiSetter.\r\n        uiSetter() {\r\n            let sectionParams = this.sectionParams;\r\n            let setter = [\r\n                {\r\n                    type: \"slider\", id: \"girdSize\", value: sectionParams.girdSize, min: 1, max: 100,\r\n                    callback: uiSetting.globalUiCallbacks.updateValue(this, \"girdSize\")\r\n                },\r\n                { type: \"color\",id: \"color\",default: sectionParams.color, callback: uiSetting.globalUiCallbacks.updateValue(this, \"color\")}\r\n            ];\r\n            for (let i= 0; i < this.sectionParams.points.length; i++){\r\n                setter.push(\r\n                 { type: \"slider-vector\", id: \"point\"+i , value: sectionParams.points[i], min: { x: 0, y: 0 }, max: { x: 500, y: 500 }, callback: uiSetting.globalUiCallbacks.updatePointArray(this, \"points\", i) },\r\n                )\r\n            }\r\n            return setter;\r\n        },\r\n\r\n    },\r\n    methods: {\r\n        Init() {\r\n            this.$refs.page.Init();\r\n\r\n            this.canvas = this.$refs.page.getCanvas();\r\n            this.ctx = canvas.getContext('2d');\r\n            this.$refs.page.setViewer(this.sectionParams.screenTransform,this.Render);\r\n\r\n            this.Render();\r\n        },\r\n        Render() {\r\n            this.$refs.page.Render();\r\n\r\n            const ctx = this.ctx;\r\n            const sectionParams = this.sectionParams;\r\n            const gridx = parseInt(this.canvas.width / this.sectionParams.girdSize) - 1;\r\n            const gridy = parseInt(this.canvas.height / this.sectionParams.girdSize) - 1;\r\n\r\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n            this.sectionParams.girdSize += this.$refs.page.girdSize;\r\n            uiSetting.drawGrid(this);\r\n            \r\n            if(this.sectionParams.girdSize  <= 0) {\r\n                    this.sectionParams.girdSize = 1\r\n            }\r\n            this.sectionParams.debugContent = [{\r\n                title: \"grid\", content: \"The number of cells in the x direction: \" + gridx + \"\\nThe number of cells in the y direction: \" + gridy,\r\n            }];\r\n\r\n            // EdgeTablePolygon.\r\n            // check amount of point.\r\n            const points = new Polygon(this.sectionParams.points);\r\n            if (points.size() < 3)\r\n                return;\r\n\r\n            let i, j, x0, x1, y, tx, temp;\r\n            // amount of scanline.\r\n            let scanLines, min, max;\r\n\r\n            //edge table.\r\n            let ET = {};\r\n            //active edge table.\r\n            let AET = [];\r\n            //table of intersection point.\r\n            let arr = [];\r\n            //begin point.\r\n            let p0;\r\n            //end point.\r\n            let p1;\r\n            // ptr of node.\r\n            let pNode;\r\n\r\n            min = points.minPointY();\r\n            max = points.maxPointY();\r\n            scanLines = max - min;\r\n\r\n            //Processing side by side, inserting the information of each edge into the ET.\r\n            for (let i = 0; i < points.size(); i++) {\r\n                if (i < points.size() - 1) {\r\n                    p0 = points.indexValue(i);\r\n                    p1 = points.indexValue(i + 1);\r\n                }\r\n                else {\r\n                    p0 = points.indexValue(i);\r\n                    p1 = points.indexValue(0);\r\n                }\r\n\r\n                if (p0.y > p1.y) {\r\n                    temp = p0;\r\n                    p0 = p1;\r\n                    p1 = temp;\r\n                }\r\n\r\n                if (p0.y != p1.y) {\r\n                    pNode = new Edge(p0.x, (p1.x - p0.x) / (p1.y - p0.y), (p1.y - 1));\r\n                    if (!ET[p0.y - min]) {\r\n                        ET[p0.y - min] = [];\r\n                    }\r\n\r\n                    ET[p0.y - min].push(pNode);\r\n                }\r\n\r\n            }\r\n\r\n            for (let i = 0; i < scanLines; i++) {\r\n\r\n                y = i + min;\r\n                if (ET[i]) {\r\n                    ET[i].forEach(element => {\r\n                        AET.push(element);\r\n                    });\r\n\r\n                }\r\n                ET[i] = null;\r\n\r\n                //Dealing with active edge table AET.\r\n                if (AET) {\r\n                    for (let i = 0; i < AET.length;) {\r\n                        if (AET[i].getYmax() < y) {\r\n                            AET.splice(i, 1);\r\n\r\n                        } else {\r\n                            i++;\r\n                        }\r\n                    }\r\n                }\r\n                //Activate the edge table is not empty, find the intersection, sort, draw a line.\r\n                if (AET) {\r\n\r\n                    AET.forEach(element => {\r\n                        arr.push(element.getX());\r\n                        element.setX(element.getX() + element.getDx());\r\n                    });\r\n\r\n                    arr.sort();\r\n\r\n                    for (j = 0; j < arr.length; j++) {\r\n                        if (j % 2 == 0) {\r\n                            tx = arr[j];\r\n                            if (arr[j] - tx)\r\n                                x0 = tx + 1;\r\n                            else\r\n                                x0 = tx;\r\n                            x1 = arr[j + 1];\r\n                        }\r\n\r\n                        uiSetting.drawLineInGrid(this, { x: x0, y: y }, { x: x1, y: y }, this.sectionParams.color);\r\n                    }\r\n                    arr = [];\r\n                }\r\n            }\r\n            ET = [];\r\n        },\r\n        SetUI() {\r\n            this.$refs.page.SetUI();\r\n        },\r\n\r\n\r\n    },\r\n    mounted() {\r\n        this.Init();\r\n        this.SetUI();\r\n    },\r\n\r\n\r\n};\r\n\r\n</script>\r\n","/*\r\n    @author:haruluya\r\n    @des:The obstraction of edge\r\n    @params:{\r\n        x:The starting x coordinate of the edge or the coordinate of the intersection of the edge and the scan line.\r\n        dx:Reciprocal of the slope of an edge.\r\n        ymax:The maximum y coordinate of the edge.\r\n    }\r\n*/\r\nclass Edge {\r\n    constructor(x, dx, ymax) {\r\n        this.x = x;\r\n        this.dx = dx;\r\n        this.ymax = ymax;\r\n    }\r\n    setX(x) {\r\n        this.x = x;\r\n    }\r\n    setDx(dx) {\r\n        this.dx = dx;\r\n    }\r\n    setYmax(ymax) {\r\n        this.ymax = ymax;\r\n    }\r\n    getX() {\r\n        return this.x;\r\n    }\r\n    getDx() {\r\n        return this.dx;\r\n    }\r\n    getYmax() {\r\n        return this.ymax;\r\n    }\r\n}\r\nexport default Edge;","import { render } from \"./index.vue?vue&type=template&id=602a10e6&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["Polygon","constructor","points","this","forEach","e","i","maxPointX","max","element","x","minPointX","min","maxPointY","y","minPointY","size","length","indexValue","index","isInPolygon","point","j","c","_createBlock","_component_nano_cg_experiment_page","prop_des_data","$data","prop_ui_setter","$options","prop_section_params","ref","Edge","dx","ymax","setX","setDx","setYmax","getX","getDx","getYmax","desData","category","name","buttonContent","title","content","data","canvas","ctx","sectionParams","color","debugContent","girdSize","screenTransform","scale","computed","uiSetter","setter","type","id","value","callback","uiSetting","default","push","methods","Init","$refs","page","getCanvas","getContext","setViewer","Render","gridx","parseInt","width","gridy","height","clearRect","x0","x1","tx","temp","scanLines","p0","p1","pNode","ET","AET","arr","splice","sort","SetUI","mounted","__exports__","render"],"sourceRoot":""}