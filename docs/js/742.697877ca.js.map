{"version":3,"file":"js/742.697877ca.js","mappings":"qQACIA,EAAAA,EAAAA,IAUEC,EAAA,CATGC,cAAeC,EAAAA,QACfC,eAAgBD,EAAAA,SAChBE,mBAAoBF,EAAAA,mBACpBG,qBAAsBH,EAAAA,qBACtBI,oBAAqBJ,EAAAA,cACtBK,IAAI,OACHC,OAAMC,EAAAA,KACNC,SAAQD,EAAAA,OACRE,iBAAgBT,EAAAA,UATrB,mJ,CCDJ,MACC,2uBCDD,EACC,sU,SFiBD,MAAMU,EAAU,CACZC,SAAS,aACTC,KAAK,YACLC,cAAc,OACdC,MAAM,OACNC,QAAQ,cAIZ,OACIH,KAAK,YACLI,OACI,MAAO,CACHC,GAAI,KACJC,OAAQ,KACRC,QAAS,KACTC,mBAJG,EAKHC,qBALG,EAMHX,UACAY,YAAY,CACRC,OAAO,EACPC,mBAAqBC,WAAWC,SAAS,IACzCC,MAAO,EACPC,KAAM,KAEVC,UAAU,CACNC,YAAY,CAAC,EAAG,EAAG,GACnBC,SAAS,CAACN,WAAWC,SAAS,GAAID,WAAWC,SAAS,GAAID,WAAWC,SAAS,IAC9EM,MAAM,CAAC,EAAE,EAAE,IAEfC,OAAO,CACHC,OAAO,CAAC,EAAG,EAAG,GACdC,SAAS,CAAC,EAAG,EAAG,GAChBC,GAAG,CAAC,EAAE,EAAE,IAEZC,cAAc,CACVC,eAAe,EAAE,EAAE,EAAE,IAEzBC,KAAK,KACLC,SAAS,GACTC,WAAW,KACXC,kBAAkB,KAClBC,UAAU,KAGjB,EACDC,SAAS,CACLC,kBACI,MAAM,CACFC,QAAS,CAAC,EAAG,EAAG,GAChBC,WAAYC,EAAAA,EAAAA,oBAAiCC,KAAKhC,GAAI,CAAC,IAAK,IAAK,IAAK,IACtEiC,UAAYF,EAAAA,EAAAA,oBAAiCC,KAAKhC,GAAI,CAAC,IAAK,IAAK,IAAK,IACtEkC,QAAS,CAAC,EAAG,EAAG,GAChBC,SAAU,CAAC,EAAG,EAAG,GACjBC,YAAaL,EAAAA,EAAAA,oBAAiCC,KAAKhC,GAAI,CAAC,IAAK,IAAK,IAAK,MACvEqC,UAAW,IACXC,QAAS,EAEjB,GAEJC,UACIP,KAAKQ,gBACLC,YAAW,KAAKT,KAAKU,MAAMpB,KAAKqB,QAAhB,GAA2B,IAC9C,EACDC,QAAS,CACLC,OAGI,GAFAb,KAAKV,KAAOU,KAAKU,MAAMpB,KACvBU,KAAKhC,GAAKgC,KAAKV,KAAKwB,SAChBd,KAAKR,WACL,OAEJQ,KAAKV,KAAKyB,WAAW,MAAM5C,EAAmBC,GAG9C4B,KAAK3B,YAAYC,OAAS0B,KAAKhC,GAAGC,OAAO+C,YAAchB,KAAKhC,GAAGC,OAAOgD,aAGtEjB,KAAKU,MAAMpB,KAAK4B,YAAYlB,KAAK3B,YAAY2B,KAAKhB,OAAOgB,KAAKpB,WAG9D,MAAMb,EAAOiC,KAAKR,WAAW2B,IAG7BnB,KAAKN,UAAYM,KAAKV,KAAK8B,uBAAuBrD,EAAKsD,YAGvDrB,KAAKP,kBAAoB1B,EAAKsD,WAAWC,KAAI,EAAEC,WAASxD,OAAKyD,aACzD,MAAMC,EAAgBD,EAAOD,EAiC7B,OAhCAvB,KAAKV,KAAKoC,aAAa,MAAMD,GAEzB1D,EAAK4D,UAAY5D,EAAK6D,QACtB7D,EAAK8D,QAAU9B,EAAAA,EAAAA,iBAA8BhC,EAAKmB,SAAUnB,EAAK4D,UACjE3B,KAAKV,KAAKwC,UAAU,UAAU/D,EAAK8D,QAAQJ,IAE3CzB,KAAKV,KAAKwC,UAAU,UAAU,CAAEC,MAAO,CAAC,EAAG,EAAG,IAAKN,GAGlD1D,EAAK4D,WACN5D,EAAK4D,SAAW,CAAEI,MAAO,CAAC,EAAG,KAG5BhE,EAAK6D,SACN7D,EAAK6D,OAAS,CAAEG,MAAO,CAAC,EAAG,EAAG,KAI9BhE,EAAKiE,MACDjE,EAAKmB,SAAS+C,SAAWlE,EAAKiE,MAAMC,SACpClE,EAAKiE,MAAQ,CAAEE,cAAe,EAAGnE,KAAMA,EAAKiE,OAC5ChC,KAAKV,KAAKwC,UAAU,QAAQ/D,EAAKiE,MAAMP,IAG3CzB,KAAKV,KAAKwC,UAAU,QAAQ,CAAEC,MAAO,CAAC,EAAG,EAAG,EAAG,IAAKN,GAGxDzB,KAAKV,KAAKwC,UAAU,WAAW,CAAC/D,KAAKA,EAAKmB,UAAUuC,GACpDzB,KAAKV,KAAKwC,UAAU,WAAW,CAACI,cAAc,EAAEnE,KAAKA,EAAK4D,UAAUF,GACpEzB,KAAKV,KAAKwC,UAAU,SAAS,CAAC/D,KAAKA,EAAK6D,QAAQH,GAEhDU,QAAQC,IAAIpC,KAAKR,WAAW6C,UAAUd,GAAU,YACzC,CACH5D,KAAK8D,EACLa,UAAUtC,KAAKV,KAAKiD,gBAAgBd,GACpCF,SAAS,IACFvB,KAAKJ,mBACLI,KAAKR,WAAW6C,UAAUd,IALrC,GAUP,EACDZ,SACI,IAAIX,KAAKR,WACL,OAGJ,MAAMxB,EAAKgC,KAAKhC,GAEhBA,EAAGwE,OAAOxE,EAAGyE,YACbzE,EAAGwE,OAAOxE,EAAG0E,WACb1E,EAAGwE,OAAOxE,EAAG2E,aACb3E,EAAG4E,WAAW,IAAI,IAAI,EAAE,GAExB,IAAIC,EAAmBrE,WAAWH,YAC9B2B,KAAK3B,YAAYE,mBACjByB,KAAK3B,YAAYC,OACjB0B,KAAK3B,YAAYK,MACjBsB,KAAK3B,YAAYM,MAEjBmE,EAAetE,WAAWuE,OAAO/C,KAAKhB,OAAOE,SAAUc,KAAKhB,OAAOC,OAAQe,KAAKhB,OAAOG,IACvF6D,EAAaxE,WAAWyE,QAAQH,GAEhCI,EAAc1E,WAAW2E,mBACrB3E,WAAW4E,UAAU,GAAGpD,KAAKpB,WACrCsE,EAAc1E,WAAW6E,YAAYH,KAAelD,KAAKN,WAGzDM,KAAKP,kBAAkB6D,SAAQ,EAAE3F,OAAK2E,YAAUf,eAC5CvB,KAAKV,KAAKiE,WAAWjB,EAAUpE,SAC/B,MAAMsF,EAAiB,CACnB,QAAWN,EACX,OAAUF,EACV,iBAAoBxE,WAAWiF,UAAUzD,KAAKZ,cAAcC,gBAC5D,aAAgBwD,EAChB,oBAAsB7C,KAAKhB,OAAOE,UAEhCwE,EAAWC,OAAOC,OAAOJ,EAAejC,GAC9CoC,OAAOE,QAAQH,GAAUJ,SAAQ,EAAEQ,EAAI/B,MACnC/B,KAAKV,KAAKyE,WAAWD,EAAI/B,EAAMpE,EAA/B,IAEJqC,KAAKV,KAAK0E,WAAWrG,GACrBqC,KAAKV,KAAK2E,cAActG,EAAxB,GAKP,EACDuG,sBAGI,IAAIC,EAAU,mCAEd,MAAMC,QAAkBC,MAAMF,GACxBG,QAAaF,EAASE,OACtBnD,EAAMpB,EAAAA,EAAAA,YAAyBuE,GAC/BC,EAAW,IAAIC,IAAIL,EAASM,OAAOC,SAASC,MAC5CC,QAAiBC,QAAQC,IAAI3D,EAAI4D,aAAazD,KAAI4C,UACpD,MAAMc,EAAU,IAAIR,IAAIS,EAAUV,GAAUI,KACtCP,QAAiBC,MAAMW,GAC7B,aAAaZ,EAASE,MAAtB,KAEEjC,EAAYtC,EAAAA,EAAAA,SAAsB6E,EAASM,KAAK,OAChDC,EAAW,CACbC,aAAcrF,EAAAA,EAAAA,oBAAiCC,KAAKhC,GAAI,CAAC,IAAK,IAAK,IAAK,OAG5E,IAAK,MAAMuD,KAAYoC,OAAO0B,OAAOhD,GACjCsB,OAAOE,QAAQtC,GACd+D,QAAO,EAAExB,KAASA,EAAIyB,SAAS,SAC/BjC,SAAQ,EAAEQ,EAAKmB,MACZ,IAAIO,EAAUL,EAASF,GACvB,IAAKO,EAAS,CACV,MAAMC,EAAc,IAAIjB,IAAIS,EAAUV,GAAUI,KAChDa,EAAUzF,EAAAA,EAAAA,cAA2BC,KAAKhC,GAAIyH,GAC9CN,EAASF,GAAYO,CACzB,CACAjE,EAASuC,GAAO0B,CAAhB,IAIRxF,KAAKR,WAAa,CACd2B,MACAkB,aAEJrC,KAAKU,MAAMpB,KAAKuB,MACnB,I,QGpOT,MAAM6E,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://rock-sugar/./src/pages/CG/Experiment/Texture/index.vue","webpack://rock-sugar/./src/pages/CG/Experiment/Texture/resource/vertex-shader.js","webpack://rock-sugar/./src/pages/CG/Experiment/Texture/resource/fragment-shader.js","webpack://rock-sugar/./src/pages/CG/Experiment/Texture/index.vue?e4f8"],"sourcesContent":["<template lang=\"html\">\r\n    <webgl_basic_render_panel\r\n        :prop_des_data=\"desData\"\r\n        :prop_ui_setter=\"uiSetter\"\r\n        :prop_vertex_shader=\"vertexShaderSource\"\r\n        :prop_fragment_shader=\"fragmentShaderSource\"\r\n        :prop_section_params=\"sectionParams\"\r\n        ref=\"page\"\r\n        @Init=\"Init\"\r\n        @Render=\"Render\"\r\n        @prop_ui_setter=\"uiSetter\"\r\n    />\r\n</template>\r\n<script>\r\nimport vertexShaderSource from './resource/vertex-shader.js'\r\nimport fragmentShaderSource from './resource/fragment-shader.js'\r\nimport NanoObjParse from \"../../../Webgl/HNWUEngine/ModelParse.js\"\r\n\r\nconst desData = {\r\n    category:\"Experiment\",\r\n    name:\"TextureEX\",\r\n    buttonContent:\"查看源码\",\r\n    title:\"纹理实验\",\r\n    content:\"TextureEX.\"\r\n}\r\n\r\n\r\nexport default {\r\n    name:\"TextureEX\",\r\n    data() {\r\n        return {\r\n            gl: null,\r\n            canvas: null,\r\n            program: null,\r\n            vertexShaderSource,\r\n            fragmentShaderSource,\r\n            desData,\r\n            perspective:{\r\n                aspect:0,\r\n                fieldOfViewRadians:  HNWUEngine.degToRad(60),\r\n                zNear: 1,\r\n                zFar: 10000,\r\n            },\r\n            transform:{\r\n                translation:[0, 0, 0],\r\n                rotation:[HNWUEngine.degToRad(0), HNWUEngine.degToRad(0), HNWUEngine.degToRad(0)],\r\n                scale:[1,1,1]\r\n            },\r\n            camera:{\r\n                target:[0, 0, 0],\r\n                position:[0, 0, 1],\r\n                up:[0,1,0]\r\n            },\r\n            sectionParams:{\r\n                lightDirection:[-1,3,5]\r\n            },\r\n            page:null,\r\n            uiSetter:[],\r\n            objectData:null,\r\n            objComponentsInfo:null,\r\n            objOffset:null,\r\n\r\n        }\r\n    },\r\n    computed:{\r\n        defaultMaterial(){\r\n            return{\r\n                diffuse: [1, 1, 1],\r\n                diffuseMap: NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 0]),\r\n                normalMap:  NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 0]),\r\n                ambient: [0, 0, 0],\r\n                specular: [0, 0, 0],\r\n                specularMap: NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 255]),\r\n                shininess: 400,\r\n                opacity: 1,\r\n            }\r\n        }\r\n    },\r\n    mounted(){\r\n        this.getObjectData();\r\n        setTimeout(()=>{this.$refs.page.Render();},1000)\r\n    },\r\n    methods: {\r\n        Init(){\r\n            this.page = this.$refs.page;\r\n            this.gl = this.page.getGL();\r\n            if(!this.objectData){\r\n                return;\r\n            }\r\n            this.page.addProgram(\"obj\",vertexShaderSource,fragmentShaderSource);\r\n\r\n            //Get bufferinfo and setters.\r\n            this.perspective.aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\r\n\r\n            //set tranform for 3dviewer.\r\n            this.$refs.page.set3DViewer(this.perspective,this.camera,this.transform);\r\n\r\n\r\n            const data = this.objectData.obj;\r\n\r\n            //offset.\r\n            this.objOffset = this.page.setObjectToSceenCenter(data.geometries);\r\n\r\n            //get object info.\r\n            this.objComponentsInfo = data.geometries.map(({material,data,object}) => {\r\n                const componentName = object+material;\r\n                this.page.addComponent(\"obj\",componentName);\r\n                //handel normal.\r\n                if (data.texcoord && data.normal) {\r\n                    data.tangent = NanoObjParse.generateTangents(data.position, data.texcoord);\r\n                    this.page.addBuffer(\"tangent\",data.tangent,componentName);\r\n                } else {\r\n                    this.page.addBuffer(\"tangent\",{ value: [1, 0, 0] },componentName);\r\n                }\r\n                \r\n                if (!data.texcoord) {\r\n                    data.texcoord = { value: [0, 0] };\r\n                }\r\n\r\n                if (!data.normal) {\r\n                    data.normal = { value: [0, 0, 1] };\r\n                }\r\n\r\n                //handle color.\r\n                if (data.color) {\r\n                    if (data.position.length === data.color.length) {\r\n                        data.color = { numComponents: 3, data: data.color };\r\n                        this.page.addBuffer(\"color\",data.color,componentName);\r\n                    }\r\n                }else{\r\n                    this.page.addBuffer(\"color\",{ value: [1, 1, 1, 1] },componentName);\r\n                }\r\n\r\n                this.page.addBuffer(\"position\",{data:data.position},componentName);\r\n                this.page.addBuffer(\"texcoord\",{numComponents:2,data:data.texcoord},componentName);\r\n                this.page.addBuffer(\"normal\",{data:data.normal},componentName);\r\n                \r\n                console.log(this.objectData.materials[material],\"material\");\r\n                return {\r\n                    name:componentName,\r\n                    component:this.page.getComponents()[componentName],\r\n                    material:{\r\n                        ...this.defaultMaterial,\r\n                        ...this.objectData.materials[material]\r\n                    }\r\n                }\r\n            });\r\n\r\n        },\r\n        Render(){\r\n            if(!this.objectData){\r\n                return;\r\n            }\r\n\r\n            const gl = this.gl;\r\n\r\n            gl.enable(gl.DEPTH_TEST);\r\n            gl.enable(gl.CULL_FACE);\r\n            gl.enable(gl.MULTISAMPLE);\r\n            gl.clearColor(255,255,0,1);\r\n            //matrix.\r\n            let projectionMatrix = HNWUEngine.perspective(\r\n                this.perspective.fieldOfViewRadians, \r\n                this.perspective.aspect, \r\n                this.perspective.zNear, \r\n                this.perspective.zFar\r\n                );\r\n            let cameraMatrix = HNWUEngine.lookAt(this.camera.position, this.camera.target, this.camera.up);\r\n            let viewMatrix = HNWUEngine.inverse(cameraMatrix);\r\n\r\n            let worldMatrix = HNWUEngine.getTransformMatrix(\r\n                    HNWUEngine.yRotation(0),this.transform);\r\n            worldMatrix = HNWUEngine.translate3d(worldMatrix,...this.objOffset);\r\n\r\n            //render components.\r\n            this.objComponentsInfo.forEach(({name,component,material})=>{\r\n                this.page.useProgram(component.program);\r\n                const sharedUniforms = {\r\n                    \"u_world\": worldMatrix,\r\n                    \"u_view\": viewMatrix,\r\n                    \"u_lightDirection\": HNWUEngine.normalize(this.sectionParams.lightDirection),\r\n                    \"u_projection\": projectionMatrix,\r\n                    \"u_viewWorldPosition\":this.camera.position,\r\n                }\r\n                const uniforms = Object.assign(sharedUniforms,material);\r\n                Object.entries(uniforms).forEach(([key,value])=>{\r\n                    this.page.addUniform(key,value,name);\r\n                })\r\n                this.page.setSetters(name);\r\n                this.page.drawComponent(name)\r\n            })\r\n\r\n\r\n\r\n        },\r\n        async getObjectData(){\r\n\r\n\r\n            let objLink = './models/textureEx/textureEx.obj'\r\n\r\n            const response =  await fetch(objLink);  \r\n            const text = await response.text();\r\n            const obj = NanoObjParse.objectParse(text);\r\n            const baseLink = new URL(objLink, window.location.href);\r\n            const matTexts = await Promise.all(obj.materialLibs.map(async filename => {\r\n                const matHref = new URL(filename, baseLink).href;\r\n                const response = await fetch(matHref);\r\n                return await response.text();\r\n            }));\r\n            const materials = NanoObjParse.parseMTL(matTexts.join('\\n'));\r\n            const textures = {\r\n                defaultWhite: NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 255]),\r\n            };\r\n            // load texture for materials\r\n            for (const material of Object.values(materials)) {\r\n                Object.entries(material)\r\n                .filter(([key]) => key.endsWith('Map'))\r\n                .forEach(([key, filename]) => {\r\n                    let texture = textures[filename];\r\n                    if (!texture) {\r\n                        const textureHref = new URL(filename, baseLink).href;\r\n                        texture = NanoObjParse.createTexture(this.gl, textureHref);\r\n                        textures[filename] = texture;\r\n                    }\r\n                    material[key] = texture;\r\n                });\r\n\r\n            }\r\n            this.objectData = {\r\n                obj,\r\n                materials,\r\n            };\r\n            this.$refs.page.Init();\r\n        },\r\n\r\n\r\n\r\n    }\r\n}\r\n</script>\r\n","export default\r\n`\r\nattribute vec4 a_position;\r\nattribute vec3 a_normal;\r\nattribute vec3 a_tangent;\r\nattribute vec2 a_texcoord;\r\nattribute vec4 a_color;\r\n\r\nuniform mat4 u_projection;\r\nuniform mat4 u_view;\r\nuniform mat4 u_world;\r\nuniform vec3 u_viewWorldPosition;\r\n\r\nvarying vec3 v_normal;\r\nvarying vec3 v_tangent;\r\nvarying vec3 v_surfaceToView;\r\nvarying vec2 v_texcoord;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n  vec4 worldPosition = u_world * a_position;\r\n  gl_Position = u_projection * u_view * worldPosition;\r\n  v_surfaceToView = u_viewWorldPosition - worldPosition.xyz;\r\n  mat3 normalMat = mat3(u_world);\r\n  v_normal = normalize(normalMat * a_normal);\r\n  v_tangent = normalize(normalMat * a_tangent);\r\n\r\n  v_texcoord = a_texcoord;\r\n  v_color = a_color;\r\n}\r\n`","export default\r\n`\r\nprecision highp float;\r\n\r\nvarying vec2 v_texcoord;\r\nvarying vec4 v_color;\r\n\r\nuniform sampler2D diffuseMap;\r\n\r\n\r\nvoid main () {\r\n\r\n  vec4 diffuseMapColor = texture2D(diffuseMap, v_texcoord);\r\n  vec3 effectiveDiffuse =  diffuseMapColor.rgb * v_color.rgb;\r\n\r\n  gl_FragColor = vec4(\r\n      effectiveDiffuse,\r\n      1);\r\n}\r\n\r\n`","import { render } from \"./index.vue?vue&type=template&id=3cd0b610&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createBlock","_component_webgl_basic_render_panel","prop_des_data","$data","prop_ui_setter","prop_vertex_shader","prop_fragment_shader","prop_section_params","ref","onInit","$options","onRender","onProp_ui_setter","desData","category","name","buttonContent","title","content","data","gl","canvas","program","vertexShaderSource","fragmentShaderSource","perspective","aspect","fieldOfViewRadians","HNWUEngine","degToRad","zNear","zFar","transform","translation","rotation","scale","camera","target","position","up","sectionParams","lightDirection","page","uiSetter","objectData","objComponentsInfo","objOffset","computed","defaultMaterial","diffuse","diffuseMap","NanoObjParse","this","normalMap","ambient","specular","specularMap","shininess","opacity","mounted","getObjectData","setTimeout","$refs","Render","methods","Init","getGL","addProgram","clientWidth","clientHeight","set3DViewer","obj","setObjectToSceenCenter","geometries","map","material","object","componentName","addComponent","texcoord","normal","tangent","addBuffer","value","color","length","numComponents","console","log","materials","component","getComponents","enable","DEPTH_TEST","CULL_FACE","MULTISAMPLE","clearColor","projectionMatrix","cameraMatrix","lookAt","viewMatrix","inverse","worldMatrix","getTransformMatrix","yRotation","translate3d","forEach","useProgram","sharedUniforms","normalize","uniforms","Object","assign","entries","key","addUniform","setSetters","drawComponent","async","objLink","response","fetch","text","baseLink","URL","window","location","href","matTexts","Promise","all","materialLibs","matHref","filename","join","textures","defaultWhite","values","filter","endsWith","texture","textureHref","__exports__","render"],"sourceRoot":""}