{"version":3,"file":"js/362.95866839.js","mappings":"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","sources":["webpack://rock-sugar/./src/pages/CG/Experiment/LightModel/index.vue","webpack://rock-sugar/./src/pages/CG/Experiment/LightModel/resource/vertex-shader.js","webpack://rock-sugar/./src/pages/CG/Experiment/LightModel/resource/fragment-shader.js","webpack://rock-sugar/./src/pages/CG/Experiment/LightModel/index.vue?1d1b"],"sourcesContent":["<template lang=\"html\">\r\n    <webgl_basic_render_panel\r\n        :prop_des_data=\"desData\"\r\n        :prop_ui_setter=\"uiSetter\"\r\n        :prop_vertex_shader=\"vertexShaderSource\"\r\n        :prop_fragment_shader=\"fragmentShaderSource\"\r\n        :prop_section_params=\"sectionParams\"\r\n        ref=\"page\"\r\n        @Init=\"Init\"\r\n        @Render=\"Render\"\r\n        @prop_ui_setter=\"uiSetter\"\r\n    />\r\n</template>\r\n<script>\r\n\r\nimport vertexShaderSource from './resource/vertex-shader.js'\r\nimport fragmentShaderSource from './resource/fragment-shader.js'\r\nimport NanoObjParse from \"../../../Webgl/HNWUEngine/ModelParse.js\"\r\nimport uiSetting from '../ui-setting'\r\n\r\nconst desData = {\r\n    category: \"Experiment\",\r\n    name: \"LightModel\",\r\n    buttonContent: \"查看源码\",\r\n    title: \"光照模型实例\",\r\n    content: \"LightModel.\"\r\n}\r\n\r\n\r\n\r\n/*\r\n    @author:haruluya\r\n    @des: Ex16 LightModel.\r\n*/\r\n\r\n\r\nexport default {\r\n    name:\"LightModel\",\r\n    data() {\r\n        return {\r\n            gl: null,\r\n            canvas: null,\r\n            program: null,\r\n            vertexShaderSource,\r\n            fragmentShaderSource,\r\n            desData,\r\n            perspective:{\r\n                aspect:0,\r\n                fieldOfViewRadians:  HNWUEngine.degToRad(60),\r\n                zNear: 1,\r\n                zFar: 1000,\r\n            },\r\n            transform:{\r\n                translation:[0, 0, 0],\r\n                rotation:[HNWUEngine.degToRad(80), HNWUEngine.degToRad(130), HNWUEngine.degToRad(0)],\r\n                scale:[1.8,1.8,1.8]\r\n            },\r\n            camera:{\r\n                target:[0, 0, 0],\r\n                position:[0, 0, 1],\r\n                up:[0,1,0]\r\n            },\r\n            sectionParams:{\r\n                lightDirection:{x:-1,y:3,z:5},\r\n                lightColor:{x:255,y:255,z:255},\r\n                diffuse: {x:203,y:143,z:24},\r\n                ambient: {x:0,y:0,z:0},\r\n                specular: {x:0,y:0,z:0},\r\n                shininess: 30,\r\n                opacity: 100,\r\n            },\r\n            page:null,\r\n            uiSetter:[],\r\n            objectData:null,\r\n            objComponentsInfo:null,\r\n            objOffset:null,\r\n\r\n        }\r\n    },\r\n    computed:{\r\n        uiSetter(){\r\n            let sectionParams = this.sectionParams;\r\n            let setter = [\r\n                {type:\"slider\", id:\"shininess\", value: sectionParams.shininess, min:-50, max:50, \r\n                    callback:uiSetting.globalUiCallbacks.updateValue(this,\"shininess\")\r\n                },\r\n                {type:\"slider\", id:\"opacity\", value: sectionParams.opacity, min:0, max:100, \r\n                    callback:uiSetting.globalUiCallbacks.updateValue(this,\"opacity\")\r\n                },\r\n                { type: \"slider-vector\", id: \"lightDirection\" , value: sectionParams.lightDirection, min: { x: -100, y: -100,z:-100 }, max: { x: 100, y: 100,z:100}, callback: \r\n                    uiSetting.globalUiCallbacks.updatePoint(this, \"lightDirection\") },\r\n                { type: \"slider-vector\", id: \"lightColor\" , value: sectionParams.lightColor, min: { x: 0, y: 0,z:0 }, max: { x: 255, y: 255,z:255}, callback: \r\n                    uiSetting.globalUiCallbacks.updatePoint(this, \"lightColor\") },    \r\n                { type: \"slider-vector\", id: \"diffuse\" , value: sectionParams.diffuse, min: { x: 0, y: 0,z:0 }, max: { x: 255, y: 255,z:255}, callback: \r\n                uiSetting.globalUiCallbacks.updatePoint(this, \"diffuse\") },    \r\n                { type: \"slider-vector\", id: \"ambient\" , value: sectionParams.ambient, min: { x: 0, y: 0,z:0 }, max: { x: 255, y: 255,z:255}, callback: \r\n                uiSetting.globalUiCallbacks.updatePoint(this, \"ambient\") },    \r\n                { type: \"slider-vector\", id: \"specular\" , value: sectionParams.specular, min: { x: 0, y: 0,z:0 }, max: { x: 255, y: 255,z:255}, callback: \r\n                uiSetting.globalUiCallbacks.updatePoint(this, \"specular\") },    \r\n            ];\r\n            return setter;\r\n        }\r\n    },\r\n    mounted(){\r\n        this.getObjectData();\r\n    },\r\n    methods: {\r\n        Init(){\r\n            this.page = this.$refs.page;\r\n            this.gl = this.page.getGL();\r\n            if(!this.objectData){\r\n                return;\r\n            }\r\n            this.page.addProgram(\"obj\",vertexShaderSource,fragmentShaderSource);\r\n\r\n            //Get bufferinfo and setters.\r\n            this.perspective.aspect = this.gl.canvas.clientWidth / this.gl.canvas.clientHeight;\r\n\r\n            //set tranform for 3dviewer.\r\n            this.$refs.page.set3DViewer(this.perspective,this.camera,this.transform);\r\n\r\n            const data = this.objectData.obj;\r\n\r\n            //offset.\r\n            this.objOffset = this.page.setObjectToSceenCenter(data.geometries);\r\n\r\n            //get object info.\r\n            this.objComponentsInfo = data.geometries.map(({material,data,object}) => {\r\n                const componentName = object+material;\r\n                this.page.addComponent(\"obj\",componentName);\r\n                //handel normal.\r\n                if (data.texcoord && data.normal) {\r\n                    data.tangent = NanoObjParse.generateTangents(data.position, data.texcoord);\r\n                    this.page.addBuffer(\"tangent\",data.tangent,componentName);\r\n                } else {\r\n                    this.page.addBuffer(\"tangent\",{ value: [1, 0, 0] },componentName);\r\n                }\r\n                \r\n                if (!data.texcoord) {\r\n                    data.texcoord = { value: [0, 0] };\r\n                }\r\n\r\n                if (!data.normal) {\r\n                    data.normal = { value: [0, 0, 1] };\r\n                }\r\n\r\n                //handle color.\r\n                if (data.color) {\r\n                    if (data.position.length === data.color.length) {\r\n                        data.color = { numComponents: 3, data: data.color };\r\n                        this.page.addBuffer(\"color\",data.color,componentName);\r\n                    }\r\n                }else{\r\n                    this.page.addBuffer(\"color\",{ value: [1, 1, 1, 1] },componentName);\r\n                }\r\n\r\n                this.page.addBuffer(\"position\",{data:data.position},componentName);\r\n                this.page.addBuffer(\"texcoord\",{numComponents:2,data:data.texcoord},componentName);\r\n                this.page.addBuffer(\"normal\",{data:data.normal},componentName);\r\n                \r\n                return {\r\n                    name:componentName,\r\n                    component:this.page.getComponents()[componentName],\r\n                }\r\n            });\r\n\r\n        },\r\n        Render(){\r\n            if(!this.objectData){\r\n                return;\r\n            }\r\n\r\n            const gl = this.gl;\r\n\r\n            gl.enable(gl.DEPTH_TEST);\r\n            // gl.enable(gl.CULL_FACE);\r\n            gl.enable(gl.MULTISAMPLE);\r\n            //matrix.\r\n            let projectionMatrix = HNWUEngine.perspective(\r\n                this.perspective.fieldOfViewRadians, \r\n                this.perspective.aspect, \r\n                this.perspective.zNear, \r\n                this.perspective.zFar\r\n                );\r\n            let cameraMatrix = HNWUEngine.lookAt(this.camera.position, this.camera.target, this.camera.up);\r\n            let viewMatrix = HNWUEngine.inverse(cameraMatrix);\r\n\r\n            let worldMatrix = HNWUEngine.getTransformMatrix(\r\n                    HNWUEngine.yRotation(0),this.transform);\r\n            worldMatrix = HNWUEngine.translate3d(worldMatrix,...this.objOffset);\r\n\r\n            //render components.\r\n            this.objComponentsInfo.forEach(({name,component,material})=>{\r\n                this.page.useProgram(component.program);\r\n                const uniforms = {\r\n                    \"u_world\": worldMatrix,\r\n                    \"u_view\": viewMatrix,\r\n                    \"u_lightDirection\": HNWUEngine.normalize([\r\n                        this.sectionParams.lightDirection.x,\r\n                        this.sectionParams.lightDirection.y,\r\n                        this.sectionParams.lightDirection.z\r\n                    ]),\r\n                    \"u_ambientLight\":[7,-3,5],\r\n                    \"u_projection\": projectionMatrix,\r\n                    \"u_viewWorldPosition\":this.camera.position,\r\n                    \"u_lightColor\":[\r\n                        this.sectionParams.lightColor.x /255,\r\n                        this.sectionParams.lightColor.y/255,\r\n                        this.sectionParams.lightColor.z/255\r\n                    ],\r\n                    \"diffuse\": [\r\n                            this.sectionParams.diffuse.x/255,\r\n                            this.sectionParams.diffuse.y/255,\r\n                            this.sectionParams.diffuse.z/255,\r\n                        ],\r\n                    \"ambient\": [\r\n                        this.sectionParams.ambient.x/255,\r\n                        this.sectionParams.ambient.y/255,\r\n                        this.sectionParams.ambient.z/255,\r\n                    ],\r\n                    \"specular\": [\r\n                        this.sectionParams.specular.x/255,\r\n                        this.sectionParams.specular.y/255,\r\n                        this.sectionParams.specular.z/255,\r\n                    ],\r\n                    \"shininess\": this.sectionParams.shininess,\r\n                    \"opacity\": this.sectionParams.opacity / 100,\r\n                }\r\n                Object.entries(uniforms).forEach(([key,value])=>{\r\n                    this.page.addUniform(key,value,name);\r\n                })\r\n                this.page.setSetters(name);\r\n                this.page.drawComponent(name)\r\n            })\r\n\r\n\r\n        },\r\n        async getObjectData(){\r\n            let objLink = './models/lightModel/LightModel.obj'\r\n\r\n            const response =  await fetch(objLink);  \r\n            const text = await response.text();\r\n            const obj = NanoObjParse.objectParse(text);\r\n            const baseLink = new URL(objLink, window.location.href);\r\n            const matTexts = await Promise.all(obj.materialLibs.map(async filename => {\r\n                const matHref = new URL(filename, baseLink).href;\r\n                const response = await fetch(matHref);\r\n                return await response.text();\r\n            }));\r\n            const materials = NanoObjParse.parseMTL(matTexts.join('\\n'));\r\n            const textures = {\r\n                defaultWhite: NanoObjParse.create1PixelTexture(this.gl, [255, 255, 255, 255]),\r\n            };\r\n            // load texture for materials\r\n            for (const material of Object.values(materials)) {\r\n                Object.entries(material)\r\n                .filter(([key]) => key.endsWith('Map'))\r\n                .forEach(([key, filename]) => {\r\n                    let texture = textures[filename];\r\n                    if (!texture) {\r\n                        const textureHref = new URL(filename, baseLink).href;\r\n                        texture = NanoObjParse.createTexture(this.gl, textureHref);\r\n                        textures[filename] = texture;\r\n                    }\r\n                    material[key] = texture;\r\n                });\r\n            }\r\n            this.objectData = {\r\n                obj,\r\n                materials,\r\n            };\r\n            this.$refs.page.Init();\r\n        },\r\n    }\r\n}\r\n</script>\r\n","export default\r\n`\r\nattribute vec4 a_position;\r\nattribute vec3 a_normal;\r\nattribute vec3 a_tangent;\r\nattribute vec2 a_texcoord;\r\nattribute vec4 a_color;\r\n\r\nuniform mat4 u_projection;\r\nuniform mat4 u_view;\r\nuniform mat4 u_world;\r\nuniform vec3 u_viewWorldPosition;\r\n\r\nvarying vec3 v_normal;\r\nvarying vec3 v_tangent;\r\nvarying vec3 v_surfaceToView;\r\nvarying vec2 v_texcoord;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\n  vec4 worldPosition = u_world * a_position;\r\n  gl_Position = u_projection * u_view * worldPosition;\r\n  v_surfaceToView = u_viewWorldPosition - worldPosition.xyz;\r\n  mat3 normalMat = mat3(u_world);\r\n  v_normal = normalize(normalMat * a_normal);\r\n  v_tangent = normalize(normalMat * a_tangent);\r\n\r\n  v_texcoord = a_texcoord;\r\n  v_color = a_color;\r\n}\r\n`","export default\r\n`\r\nprecision highp float;\r\n\r\nvarying vec3 v_normal;\r\nvarying vec3 v_tangent;\r\nvarying vec3 v_surfaceToView;\r\nvarying vec2 v_texcoord;\r\nvarying vec4 v_color;\r\n\r\nuniform vec3 diffuse;\r\nuniform sampler2D diffuseMap;\r\nuniform vec3 ambient;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform sampler2D specularMap;\r\nuniform float shininess;\r\nuniform sampler2D normalMap;\r\nuniform float opacity;\r\nuniform vec3 u_lightDirection;\r\nuniform vec3 u_lightColor;\r\n\r\nuniform vec3 u_ambientLight;\r\n\r\nvoid main () {\r\n  vec3 normal = normalize(v_normal) * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n  vec3 tangent = normalize(v_tangent) * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n  vec3 bitangent = normalize(cross(normal, tangent));\r\n\r\n  mat3 tbn = mat3(tangent, bitangent, normal);\r\n  normal = texture2D(normalMap, v_texcoord).rgb * 2. - 1.;\r\n  normal = normalize(tbn * normal);\r\n\r\n  vec3 surfaceToViewDirection = normalize(v_surfaceToView);\r\n  vec3 halfVector = normalize(u_lightDirection + surfaceToViewDirection);\r\n\r\n  float fakeLight = dot(u_lightDirection, normal) * .5 + .5;\r\n  float specularLight = clamp(dot(normal, halfVector), 0.0, 1.0);\r\n  vec4 specularMapColor = texture2D(specularMap, v_texcoord);\r\n  vec3 effectiveSpecular = specular * specularMapColor.rgb;\r\n\r\n  vec4 diffuseMapColor = texture2D(diffuseMap, v_texcoord);\r\n  vec3 effectiveDiffuse = diffuse* v_color.rgb;\r\n  float effectiveOpacity = opacity * v_color.a;\r\n\r\n  gl_FragColor = vec4(\r\n      emissive +\r\n      ambient * u_ambientLight +\r\n      effectiveDiffuse * fakeLight * u_lightColor +\r\n      effectiveSpecular * pow(specularLight, shininess),\r\n      effectiveOpacity);\r\n}\r\n\r\n`","import { render } from \"./index.vue?vue&type=template&id=3fa6abd6&lang=html\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"F:\\\\Note-Haruluya\\\\Project\\\\Rock-sugar\\\\rock-sugar\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createBlock","_component_webgl_basic_render_panel","prop_des_data","$data","prop_ui_setter","$options","prop_vertex_shader","prop_fragment_shader","prop_section_params","ref","onInit","onRender","onProp_ui_setter","desData","category","name","buttonContent","title","content","data","gl","canvas","program","vertexShaderSource","fragmentShaderSource","perspective","aspect","fieldOfViewRadians","HNWUEngine","degToRad","zNear","zFar","transform","translation","rotation","scale","camera","target","position","up","sectionParams","lightDirection","x","y","z","lightColor","diffuse","ambient","specular","shininess","opacity","page","uiSetter","objectData","objComponentsInfo","objOffset","computed","this","setter","type","id","value","min","max","callback","uiSetting","mounted","getObjectData","methods","Init","$refs","getGL","addProgram","clientWidth","clientHeight","set3DViewer","obj","setObjectToSceenCenter","geometries","map","material","object","componentName","addComponent","texcoord","normal","tangent","NanoObjParse","addBuffer","color","length","numComponents","component","getComponents","Render","enable","DEPTH_TEST","MULTISAMPLE","projectionMatrix","cameraMatrix","lookAt","viewMatrix","inverse","worldMatrix","getTransformMatrix","yRotation","translate3d","forEach","useProgram","uniforms","normalize","Object","entries","key","addUniform","setSetters","drawComponent","async","objLink","response","fetch","text","baseLink","URL","window","location","href","matTexts","Promise","all","materialLibs","matHref","filename","materials","join","textures","defaultWhite","values","filter","endsWith","texture","textureHref","__exports__","render"],"sourceRoot":""}