"use strict";(self["webpackChunkrock_sugar"]=self["webpackChunkrock_sugar"]||[]).push([[872],{1261:function(e,t,n){n.r(t),n.d(t,{default:function(){return U}});var a=n(3396);function i(e,t,n,i,o,s){const r=(0,a.up)("nano_game_assignment_page");return(0,a.wg)(),(0,a.j4)(r,{prop_des_data:o.desData,prop_ui_setter:o.uiSetter,prop_section_params:e.sectionParams,prop_buttons_callback:s.sceneCallbacks,ref:"page",onInit:s.Init,onRender:s.Render},null,8,["prop_des_data","prop_ui_setter","prop_section_params","prop_buttons_callback","onInit","onRender"])}n(7658);var o="\nattribute vec4 a_position;\nattribute vec3 a_normal;\nattribute vec3 a_tangent;\nattribute vec2 a_texcoord;\nattribute vec4 a_color;\n\nuniform mat4 u_projection;\nuniform mat4 u_view;\nuniform mat4 u_world;\nuniform vec3 u_viewWorldPosition;\n\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_surfaceToView;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\n\nvoid main() {\n  vec4 worldPosition = u_world * a_position;\n  gl_Position = u_projection * u_view * worldPosition;\n  v_surfaceToView = u_viewWorldPosition - worldPosition.xyz;\n  mat3 normalMat = mat3(u_world);\n  v_normal = normalize(normalMat * a_normal);\n  v_tangent = normalize(normalMat * a_tangent);\n\n  v_texcoord = a_texcoord;\n  v_color = a_color;\n}\n",s="\nprecision highp float;\n\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_surfaceToView;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\n\nuniform vec3 diffuse;\nuniform sampler2D diffuseMap;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform sampler2D specularMap;\nuniform float shininess;\nuniform sampler2D normalMap;\nuniform float opacity;\nuniform vec3 u_lightDirection;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightIntensity;\n\nvoid main () {\n  vec3 normal = normalize(v_normal) * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n  vec3 tangent = normalize(v_tangent) * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n  vec3 bitangent = normalize(cross(normal, tangent));\n\n  mat3 tbn = mat3(tangent, bitangent, normal);\n  normal = texture2D(normalMap, v_texcoord).rgb * 2. - 1.;\n  normal = normalize(tbn * normal);\n\n  vec3 surfaceToViewDirection = normalize(v_surfaceToView);\n  vec3 halfVector = normalize(u_lightDirection + surfaceToViewDirection);\n\n  float fakeLight = dot(u_lightDirection, normal) * .5 + .8;\n  float specularLight = clamp(dot(normal, halfVector), 0.0, 1.0);\n  vec4 specularMapColor = texture2D(specularMap, v_texcoord);\n  vec3 effectiveSpecular = specular * specularMapColor.rgb;\n\n  vec4 diffuseMapColor = texture2D(diffuseMap, v_texcoord);\n  vec3 effectiveDiffuse = diffuse * diffuseMapColor.rgb * v_color.rgb;\n  float effectiveOpacity = opacity * diffuseMapColor.a * v_color.a;\n\n  gl_FragColor = vec4(\n      emissive +\n      ambient * u_ambientLight +\n      effectiveDiffuse * fakeLight *u_lightIntensity+\n      effectiveSpecular * pow(specularLight, shininess),\n      1);\n}\n\n",r=n(311),c=n(6905),l=n.p+"img/back.482e02a0.jpg",h=n.p+"img/down.810ec1bb.jpg",g=n.p+"img/front.6998cf38.jpg",m=n.p+"img/left.967a5b0f.jpg",u=n.p+"img/right.0d2529c9.jpg",p=n.p+"img/up.927983ff.jpg",d=n(2482);n(1703);class f{constructor(e,t){if((0,d.Z)(this,"yaw",90),(0,d.Z)(this,"pitch",0),(0,d.Z)(this,"speed",.03),(0,d.Z)(this,"sensitivity",.1),(0,d.Z)(this,"zoom",45),(0,d.Z)(this,"front",null),(0,d.Z)(this,"right",null),(0,d.Z)(this,"up",null),(0,d.Z)(this,"worldUp",[0,1,0]),(0,d.Z)(this,"canvas",null),(0,d.Z)(this,"camera",null),this.canvas=e,this.camera=t,!this.canvas||!this.camera)throw new Error("vehicle controller init failed!");this.updateControllerVectors()}updateControllerVectors(){let e=[0,0,0];e[0]=Math.cos(HNWUEngine.degToRad(this.yaw))*Math.cos(HNWUEngine.degToRad(0)),e[1]=Math.sin(HNWUEngine.degToRad(0)),e[2]=Math.sin(HNWUEngine.degToRad(this.yaw))*Math.cos(HNWUEngine.degToRad(0)),this.front=HNWUEngine.normalize(e),this.right=HNWUEngine.normalize(HNWUEngine.cross(this.front,this.worldUp)),this.up=HNWUEngine.normalize(HNWUEngine.cross(this.right,this.front)),this.camera.target=HNWUEngine.subtractVectors(this.camera.position,HNWUEngine.scaleVector([Math.cos(HNWUEngine.degToRad(this.yaw))*Math.cos(HNWUEngine.degToRad(this.pitch)),Math.sin(HNWUEngine.degToRad(this.pitch)),Math.sin(HNWUEngine.degToRad(this.yaw))*Math.cos(HNWUEngine.degToRad(this.pitch))],-1)),this.camera.target[1]-=.5}load(e){this.transform=e.transform,this.canvas.onmouseenter=e=>{document.addEventListener("keypress",this.keyHandle.bind(this),!1),document.addEventListener("mousemove",this.mouseHandle.bind(this),!1)}}unload(){document.removeEventListener("keypress",this.keyHandle.bind(this),!1),document.removeEventListener("mousemove",this.mouseHandle.bind(this),!1)}keyHandle(e){let t=this.speed*window.deltaTime;"w"===e.key&&(HNWUEngine.vec3add(this.transform.translation,HNWUEngine.vec3Multiply(this.front,t)),HNWUEngine.vec3add(this.camera.position,HNWUEngine.vec3Multiply(this.front,t))),"s"===e.key&&(HNWUEngine.vec3sub(this.transform.translation,HNWUEngine.vec3Multiply(this.front,t)),HNWUEngine.vec3sub(this.camera.position,HNWUEngine.vec3Multiply(this.front,t))),"e"===e.key&&(this.transform.translation[1]+=2*t,this.camera.position[1]+=2*t),"q"===e.key&&(this.transform.translation[1]-=2*t,this.camera.position[1]-=2*t),this.updateControllerVectors()}mouseHandle(e){this.yaw-=e.movementX*this.sensitivity,this.transform.rotation[1]+=HNWUEngine.degToRad(e.movementX*this.sensitivity),this.pitch+=e.movementY*this.sensitivity,this.updateControllerVectors()}}let v="./sceneTransform1.json",_="./sceneAnimation.json";const w={back:l,down:h,front:g,left:m,right:u,up:p},b={category:"Webgl",name:"VRAssignment",buttonContent:"查看源码",title:"VRAssignment",content:"just a assignment for vr course."};var y={name:"VRAssignment",data(){return{gl:null,canvas:null,program:null,vertexShaderSource:o,fragmentShaderSource:s,desData:b,desData:b,page:null,uiSetter:[],objectData:[],objOffset:null,carTransform:{translation:[0,0,0],rotation:[HNWUEngine.degToRad(180),HNWUEngine.degToRad(200),HNWUEngine.degToRad(0)],scale:[1,1,1]},vehicleController:null,cameraAnims:null,sceneAnims:{scene1ShowPlt:!0},sceneAnimsData:null,currentScene:0}},mounted(){this.getObjectData(["./models/vrAssignmentBeginScene/scene.obj"])},computed:{sceneCallbacks(){return{carInfo:()=>{const e=this.$refs.page.getCameraData();e.position=[-19.667,11.333,11.119],e.target=[-19.676,11.2,12.278],this.sceneAnims.scene1ShowPlt=!1,this.$refs.page.showCarInfo=!0,this.$refs.page.beginGameRender()},freePerspective:()=>{this.sceneAnims.scene1ShowPlt?(this.sceneAnims.scene1ShowPlt=!1,this.$refs.page.beginGameRender()):(this.sceneAnims.scene1ShowPlt=!0,this.$refs.page.beginGameRender())},startRacing:()=>{this.$refs.page.showLoadingPage(),this.objectData=[],this.currentScene=1,this.$refs.page.clearComponents(),this.sceneAnims.scene1ShowPlt=!1,this.$refs.page.setCamera("vehicle");const e=this.$refs.page.getCameraData();e.position=[-22,11.8,5.1],e.target=[-19.676,10.3,12.278],this.vehicleController=new f(this.canvas,this.page.getCameraData()),this.$refs.page.currentVehicleMode=0,v="./sceneTransform2.json",this.getObjectData(["./models/runScene/car.obj","./models/runScene/scene2_road.obj"])},endRacing:()=>{this.$refs.page.showLoadingPage(),this.objectData=[],this.currentScene=0,this.$refs.page.clearComponents(),this.sceneAnims.scene1ShowPlt=!0,this.$refs.page.setCamera("viewer");const e=this.$refs.page.getCameraData();e.position=[-19.667,11.333,11.119],e.target=[-19.676,11.2,12.278],this.vehicleController=null,this.$refs.page.currentVehicleMode=-1,v="./sceneTransform1.json",this.getObjectData(["./models/vrAssignmentBeginScene/scene.obj"])}}}},methods:{Init(){if(this.page=this.$refs.page,this.gl=this.page.getGL(),this.canvas=this.page.canvas,0==this.objectData.length)return;this.page.loading=!1,this.$refs.page.showCarInfo=!1,0==this.currentScene?(this.page.showScene1UI=!0,this.page.showScene2UI=!1):1==this.currentScene&&(this.page.showScene1UI=!1,this.page.showScene2UI=!0),this.page.addSkybox(w),this.page.addScreenSnowEffect();const e=this.page.createProgram(o,s);this.page.setCamera("viewer"),this.cameraAnims=this.page.createCameraAnims(this.sceneAnimsData),this.objectData.forEach((t=>{const n=this.gl,a=t.obj,i=t.transform,o=t.components,s=this.page.setObjectToScreenCenter(a.geometries);a.geometries.forEach((({material:a,data:l,object:h})=>{const g=h+a,m=new c.Z(n,g,e);l.texcoord&&l.normal?(l.tangent=r.Z.generateTangents(l.position,l.texcoord),m.addBuffer("tangent",l.tangent)):m.addBuffer("tangent",{value:[1,0,0]}),l.texcoord||(l.texcoord={value:[0,0]}),l.normal||(l.normal={value:[0,0,1]}),l.color?l.position.length===l.color.length&&(l.color={numComponents:3,data:l.color},m.addBuffer("color",l.color)):m.addBuffer("color",{value:[1,1,1,1]}),m.addBuffer("position",{data:l.position}),m.addBuffer("texcoord",{numComponents:2,data:l.texcoord}),m.addBuffer("normal",{data:l.normal}),m.setMaterial({...HNWUEngine.getDefaultMaterial(n),...t.materials[a]}),m.setTransform(i),o.vehicleController&&(m.setPosition(s),this.vehicleController.load(m)),this.page.addGeometryComponent(m)}))}))},Render(){if(0==this.objectData.length)return;const e=this.gl;e.enable(e.DEPTH_TEST),e.enable(e.CULL_FACE),e.depthFunc(e.LESS);const t=this.page.getViewMatrix(),n=this.page.getProjectionMatrix(),a=this.page.getCameraData().position,i={u_view:t,u_lightDirection:HNWUEngine.normalize(this.page.lightDirection),u_projection:n,u_viewWorldPosition:a,u_lightIntensity:this.page.lightIntensity.map((e=>e/255))};this.page.setSharedUniforms(i),this.sceneAnims.scene1ShowPlt&&this.cameraAnims.play("scene1ShowPlt")&&console.log("Scene1ShowPlt play over!")},async getObjectData(e){const t=await fetch(_);this.sceneAnimsData=JSON.parse(await t.text());for(let n=0;n<e.length;n++){const t=e[n];let a=t;const i=await fetch(a),o=await i.text(),s=r.Z.objectParse(o),c=new URL(a,window.location.href),l=await Promise.all(s.materialLibs.map((async e=>{const t=new URL(e,c).href,n=await fetch(t);return await n.text()}))),h=r.Z.parseMTL(l.join("\n")),g={defaultWhite:r.Z.create1PixelTexture(this.gl,[255,255,255,255])};for(const e of Object.values(h))Object.entries(e).filter((([e])=>e.endsWith("Map"))).forEach((([t,n])=>{let a=g[n];if(!a){const e=new URL(n,c).href;a=r.Z.createTexture(this.gl,e),g[n]=a}e[t]=a}));const m=await fetch(v),u=JSON.parse(await m.text()),p=u[n].transform,d=u[n].components;this.objectData.push({path:t,obj:s,materials:h,transform:p,components:d})}this.$refs.page.Init()}}},E=n(89);const S=(0,E.Z)(y,[["render",i]]);var U=S}}]);
//# sourceMappingURL=872.5f087459.js.map