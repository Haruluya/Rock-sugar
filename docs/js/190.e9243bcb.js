"use strict";(self["webpackChunkrock_sugar"]=self["webpackChunkrock_sugar"]||[]).push([[190],{1190:function(e,n,t){t.r(n),t.d(n,{default:function(){return g}});var o=t(3396);function a(e,n,t,a,i,r){const s=(0,o.up)("nano_shader_toy_renderer_page");return(0,o.wg)(),(0,o.j4)(s,{prop_des_data:i.desData,prop_ui_setter:i.uiSetter,prop_vertex_shader:i.vertexShaderSource,prop_fragment_shader:i.fragmentShaderSource,ref:"page",onInit:r.Init,onRender:r.Render,onProp_ui_setter:i.uiSetter},null,8,["prop_des_data","prop_ui_setter","prop_vertex_shader","prop_fragment_shader","onInit","onRender","onProp_ui_setter"])}t(8675),t(3408),t(4590);var i="\nattribute vec4 a_position;\n\nvoid main() {\n  gl_Position = a_position;\n}\n",r="\nprecision highp float;\n\nuniform vec2 iResolution;\nuniform vec2 iMouse;\nuniform float iTime;\n\n#define pi 3.1415926\n\nfloat T;\n\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\nvec4 min(vec4 a, vec4 b,vec4 c) {return (vec4(1.0)-c)*a+c*b;}\n\n\nfloat simplegridnoise(vec2 v)\n{\n    float s = 1. / 256.;\n    vec2 fl = floor(v), fr = fract(v);\n    float mindist = 1e9;\n    for(int y = -1; y <= 1; y++)\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 offset = vec2(x, y);\n            vec2 pos = .5 + .5 * cos(2. * pi * (T*.1 + hash(fl+offset)) + vec2(0,1.6));\n            mindist = min(mindist, length(pos+offset -fr));\n        }\n    \n    return mindist;\n}\n\nfloat blobnoise(vec2 v, float s)\n{\n    return pow(.5 + .5 * cos(pi * clamp(simplegridnoise(v)*2., 0., 1.)), s);\n}\n\nfloat fractalblobnoise(vec2 v, float s)\n{\n    float val = 0.;\n    const float n = 4.;\n    for(float i = 0.; i < n; i++)\n        //val += 1.0 / (i + 1.0) * blobnoise((i + 1.0) * v + vec2(0.0, iTime * 1.0), s);\n    \tval += pow(0.5, i+1.) * blobnoise(exp2(i) * v + vec2(0, T), s);\n\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    T = iTime;\n\n    vec2 r = vec2(1.0, iResolution.y / iResolution.x);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float val = fractalblobnoise(r * uv * 20.0, 5.0);\n    //float val = fractalblobnoise(r * uv * 40.0, 1.25); // more snowflakes\n    //float val = blobnoise(r * uv * 10.0, 5.0);\n    //fragColor = vec4(vec3(val), 1.0);\n    fragColor = mix(vec4(.0), vec4(1.0), vec4(val));\n}\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n";const s={category:"Webgl",name:"NanoShaderToy",buttonContent:"查看源码",title:"Shadertoy 渲染器",content:"."},l=new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]);var c={name:"SpotLight",data(){return{gl:null,desData:s,vertexShaderSource:i,fragmentShaderSource:r,perspective:{aspect:0,fieldOfViewRadians:HNWUEngine.degToRad(60),zNear:1,zFar:2e3},transform:{translation:[0,0,-0],rotation:[HNWUEngine.degToRad(180),HNWUEngine.degToRad(200),HNWUEngine.degToRad(0)],scale:[1,1,1]},camera:{target:[0,0,0],position:[0,0,2],up:[0,1,0]},page:null,uiSetter:[]}},methods:{Init(){this.page=this.$refs.page,this.gl=this.page.getGL(),this.canvas=this.page.getCanvas(),this.program=this.page.getProgram(),this.perspective.aspect=this.gl.canvas.clientWidth/this.gl.canvas.clientHeight,this.page.addBuffer("position",{numComponents:2,data:l})},Render(){const e=[this.page.getMousePosition().x,this.page.getMousePosition().y],n=[this.gl.canvas.width,this.gl.canvas.height],t=this.page.getTime();this.page.addUniform("iResolution",n),this.page.addUniform("iMouse",e),this.page.addUniform("iTime",t)}}},v=t(89);const p=(0,v.Z)(c,[["render",a]]);var g=p}}]);
//# sourceMappingURL=190.e9243bcb.js.map